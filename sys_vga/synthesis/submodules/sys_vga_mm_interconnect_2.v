// sys_vga_mm_interconnect_2.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.0 145

`timescale 1 ps / 1 ps
module sys_vga_mm_interconnect_2 (
		input  wire [11:0] Arm_A9_HPS_h2f_lw_axi_master_awid,                                        //                                       Arm_A9_HPS_h2f_lw_axi_master.awid
		input  wire [20:0] Arm_A9_HPS_h2f_lw_axi_master_awaddr,                                      //                                                                   .awaddr
		input  wire [3:0]  Arm_A9_HPS_h2f_lw_axi_master_awlen,                                       //                                                                   .awlen
		input  wire [2:0]  Arm_A9_HPS_h2f_lw_axi_master_awsize,                                      //                                                                   .awsize
		input  wire [1:0]  Arm_A9_HPS_h2f_lw_axi_master_awburst,                                     //                                                                   .awburst
		input  wire [1:0]  Arm_A9_HPS_h2f_lw_axi_master_awlock,                                      //                                                                   .awlock
		input  wire [3:0]  Arm_A9_HPS_h2f_lw_axi_master_awcache,                                     //                                                                   .awcache
		input  wire [2:0]  Arm_A9_HPS_h2f_lw_axi_master_awprot,                                      //                                                                   .awprot
		input  wire        Arm_A9_HPS_h2f_lw_axi_master_awvalid,                                     //                                                                   .awvalid
		output wire        Arm_A9_HPS_h2f_lw_axi_master_awready,                                     //                                                                   .awready
		input  wire [11:0] Arm_A9_HPS_h2f_lw_axi_master_wid,                                         //                                                                   .wid
		input  wire [31:0] Arm_A9_HPS_h2f_lw_axi_master_wdata,                                       //                                                                   .wdata
		input  wire [3:0]  Arm_A9_HPS_h2f_lw_axi_master_wstrb,                                       //                                                                   .wstrb
		input  wire        Arm_A9_HPS_h2f_lw_axi_master_wlast,                                       //                                                                   .wlast
		input  wire        Arm_A9_HPS_h2f_lw_axi_master_wvalid,                                      //                                                                   .wvalid
		output wire        Arm_A9_HPS_h2f_lw_axi_master_wready,                                      //                                                                   .wready
		output wire [11:0] Arm_A9_HPS_h2f_lw_axi_master_bid,                                         //                                                                   .bid
		output wire [1:0]  Arm_A9_HPS_h2f_lw_axi_master_bresp,                                       //                                                                   .bresp
		output wire        Arm_A9_HPS_h2f_lw_axi_master_bvalid,                                      //                                                                   .bvalid
		input  wire        Arm_A9_HPS_h2f_lw_axi_master_bready,                                      //                                                                   .bready
		input  wire [11:0] Arm_A9_HPS_h2f_lw_axi_master_arid,                                        //                                                                   .arid
		input  wire [20:0] Arm_A9_HPS_h2f_lw_axi_master_araddr,                                      //                                                                   .araddr
		input  wire [3:0]  Arm_A9_HPS_h2f_lw_axi_master_arlen,                                       //                                                                   .arlen
		input  wire [2:0]  Arm_A9_HPS_h2f_lw_axi_master_arsize,                                      //                                                                   .arsize
		input  wire [1:0]  Arm_A9_HPS_h2f_lw_axi_master_arburst,                                     //                                                                   .arburst
		input  wire [1:0]  Arm_A9_HPS_h2f_lw_axi_master_arlock,                                      //                                                                   .arlock
		input  wire [3:0]  Arm_A9_HPS_h2f_lw_axi_master_arcache,                                     //                                                                   .arcache
		input  wire [2:0]  Arm_A9_HPS_h2f_lw_axi_master_arprot,                                      //                                                                   .arprot
		input  wire        Arm_A9_HPS_h2f_lw_axi_master_arvalid,                                     //                                                                   .arvalid
		output wire        Arm_A9_HPS_h2f_lw_axi_master_arready,                                     //                                                                   .arready
		output wire [11:0] Arm_A9_HPS_h2f_lw_axi_master_rid,                                         //                                                                   .rid
		output wire [31:0] Arm_A9_HPS_h2f_lw_axi_master_rdata,                                       //                                                                   .rdata
		output wire [1:0]  Arm_A9_HPS_h2f_lw_axi_master_rresp,                                       //                                                                   .rresp
		output wire        Arm_A9_HPS_h2f_lw_axi_master_rlast,                                       //                                                                   .rlast
		output wire        Arm_A9_HPS_h2f_lw_axi_master_rvalid,                                      //                                                                   .rvalid
		input  wire        Arm_A9_HPS_h2f_lw_axi_master_rready,                                      //                                                                   .rready
		input  wire        pll_0_outclk0_clk,                                                        //                                                      pll_0_outclk0.clk
		input  wire        sys_sdram_pll_0_sys_clk_clk,                                              //                                            sys_sdram_pll_0_sys_clk.clk
		input  wire        alt_vip_vfr_0_clock_reset_reset_reset_bridge_in_reset_reset,              //              alt_vip_vfr_0_clock_reset_reset_reset_bridge_in_reset.reset
		input  wire        Arm_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // Arm_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        sysid_qsys_0_reset_reset_bridge_in_reset_reset,                           //                           sysid_qsys_0_reset_reset_bridge_in_reset.reset
		input  wire        system_console_reset_reset_bridge_in_reset_reset,                         //                         system_console_reset_reset_bridge_in_reset.reset
		output wire [4:0]  alt_vip_vfr_0_avalon_slave_address,                                       //                                         alt_vip_vfr_0_avalon_slave.address
		output wire        alt_vip_vfr_0_avalon_slave_write,                                         //                                                                   .write
		output wire        alt_vip_vfr_0_avalon_slave_read,                                          //                                                                   .read
		input  wire [31:0] alt_vip_vfr_0_avalon_slave_readdata,                                      //                                                                   .readdata
		output wire [31:0] alt_vip_vfr_0_avalon_slave_writedata,                                     //                                                                   .writedata
		output wire [2:0]  fifo_fpga_to_hps_out_csr_address,                                         //                                           fifo_fpga_to_hps_out_csr.address
		output wire        fifo_fpga_to_hps_out_csr_write,                                           //                                                                   .write
		output wire        fifo_fpga_to_hps_out_csr_read,                                            //                                                                   .read
		input  wire [31:0] fifo_fpga_to_hps_out_csr_readdata,                                        //                                                                   .readdata
		output wire [31:0] fifo_fpga_to_hps_out_csr_writedata,                                       //                                                                   .writedata
		output wire [2:0]  fifo_hps_to_fpga_in_csr_address,                                          //                                            fifo_hps_to_fpga_in_csr.address
		output wire        fifo_hps_to_fpga_in_csr_write,                                            //                                                                   .write
		output wire        fifo_hps_to_fpga_in_csr_read,                                             //                                                                   .read
		input  wire [31:0] fifo_hps_to_fpga_in_csr_readdata,                                         //                                                                   .readdata
		output wire [31:0] fifo_hps_to_fpga_in_csr_writedata,                                        //                                                                   .writedata
		output wire [1:0]  hex5_hex0_s1_address,                                                     //                                                       hex5_hex0_s1.address
		output wire        hex5_hex0_s1_write,                                                       //                                                                   .write
		input  wire [31:0] hex5_hex0_s1_readdata,                                                    //                                                                   .readdata
		output wire [31:0] hex5_hex0_s1_writedata,                                                   //                                                                   .writedata
		output wire        hex5_hex0_s1_chipselect,                                                  //                                                                   .chipselect
		output wire [1:0]  pushbuttons_s1_address,                                                   //                                                     pushbuttons_s1.address
		output wire        pushbuttons_s1_write,                                                     //                                                                   .write
		input  wire [31:0] pushbuttons_s1_readdata,                                                  //                                                                   .readdata
		output wire [31:0] pushbuttons_s1_writedata,                                                 //                                                                   .writedata
		output wire        pushbuttons_s1_chipselect,                                                //                                                                   .chipselect
		output wire        reg32_avalon_interface_0_avalon_slave_0_write,                            //                            reg32_avalon_interface_0_avalon_slave_0.write
		output wire        reg32_avalon_interface_0_avalon_slave_0_read,                             //                                                                   .read
		input  wire [31:0] reg32_avalon_interface_0_avalon_slave_0_readdata,                         //                                                                   .readdata
		output wire [31:0] reg32_avalon_interface_0_avalon_slave_0_writedata,                        //                                                                   .writedata
		output wire [3:0]  reg32_avalon_interface_0_avalon_slave_0_byteenable,                       //                                                                   .byteenable
		output wire        reg32_avalon_interface_0_avalon_slave_0_chipselect,                       //                                                                   .chipselect
		output wire [0:0]  sysid_qsys_0_control_slave_address,                                       //                                         sysid_qsys_0_control_slave.address
		input  wire [31:0] sysid_qsys_0_control_slave_readdata,                                      //                                                                   .readdata
		output wire [0:0]  system_console_avalon_jtag_slave_address,                                 //                                   system_console_avalon_jtag_slave.address
		output wire        system_console_avalon_jtag_slave_write,                                   //                                                                   .write
		output wire        system_console_avalon_jtag_slave_read,                                    //                                                                   .read
		input  wire [31:0] system_console_avalon_jtag_slave_readdata,                                //                                                                   .readdata
		output wire [31:0] system_console_avalon_jtag_slave_writedata,                               //                                                                   .writedata
		input  wire        system_console_avalon_jtag_slave_waitrequest,                             //                                                                   .waitrequest
		output wire        system_console_avalon_jtag_slave_chipselect                               //                                                                   .chipselect
	);

	wire   [31:0] system_console_avalon_jtag_slave_agent_m0_readdata;                          // system_console_avalon_jtag_slave_translator:uav_readdata -> system_console_avalon_jtag_slave_agent:m0_readdata
	wire          system_console_avalon_jtag_slave_agent_m0_waitrequest;                       // system_console_avalon_jtag_slave_translator:uav_waitrequest -> system_console_avalon_jtag_slave_agent:m0_waitrequest
	wire          system_console_avalon_jtag_slave_agent_m0_debugaccess;                       // system_console_avalon_jtag_slave_agent:m0_debugaccess -> system_console_avalon_jtag_slave_translator:uav_debugaccess
	wire   [20:0] system_console_avalon_jtag_slave_agent_m0_address;                           // system_console_avalon_jtag_slave_agent:m0_address -> system_console_avalon_jtag_slave_translator:uav_address
	wire    [3:0] system_console_avalon_jtag_slave_agent_m0_byteenable;                        // system_console_avalon_jtag_slave_agent:m0_byteenable -> system_console_avalon_jtag_slave_translator:uav_byteenable
	wire          system_console_avalon_jtag_slave_agent_m0_read;                              // system_console_avalon_jtag_slave_agent:m0_read -> system_console_avalon_jtag_slave_translator:uav_read
	wire          system_console_avalon_jtag_slave_agent_m0_readdatavalid;                     // system_console_avalon_jtag_slave_translator:uav_readdatavalid -> system_console_avalon_jtag_slave_agent:m0_readdatavalid
	wire          system_console_avalon_jtag_slave_agent_m0_lock;                              // system_console_avalon_jtag_slave_agent:m0_lock -> system_console_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] system_console_avalon_jtag_slave_agent_m0_writedata;                         // system_console_avalon_jtag_slave_agent:m0_writedata -> system_console_avalon_jtag_slave_translator:uav_writedata
	wire          system_console_avalon_jtag_slave_agent_m0_write;                             // system_console_avalon_jtag_slave_agent:m0_write -> system_console_avalon_jtag_slave_translator:uav_write
	wire    [2:0] system_console_avalon_jtag_slave_agent_m0_burstcount;                        // system_console_avalon_jtag_slave_agent:m0_burstcount -> system_console_avalon_jtag_slave_translator:uav_burstcount
	wire          system_console_avalon_jtag_slave_agent_rf_source_valid;                      // system_console_avalon_jtag_slave_agent:rf_source_valid -> system_console_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [116:0] system_console_avalon_jtag_slave_agent_rf_source_data;                       // system_console_avalon_jtag_slave_agent:rf_source_data -> system_console_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          system_console_avalon_jtag_slave_agent_rf_source_ready;                      // system_console_avalon_jtag_slave_agent_rsp_fifo:in_ready -> system_console_avalon_jtag_slave_agent:rf_source_ready
	wire          system_console_avalon_jtag_slave_agent_rf_source_startofpacket;              // system_console_avalon_jtag_slave_agent:rf_source_startofpacket -> system_console_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          system_console_avalon_jtag_slave_agent_rf_source_endofpacket;                // system_console_avalon_jtag_slave_agent:rf_source_endofpacket -> system_console_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          system_console_avalon_jtag_slave_agent_rsp_fifo_out_valid;                   // system_console_avalon_jtag_slave_agent_rsp_fifo:out_valid -> system_console_avalon_jtag_slave_agent:rf_sink_valid
	wire  [116:0] system_console_avalon_jtag_slave_agent_rsp_fifo_out_data;                    // system_console_avalon_jtag_slave_agent_rsp_fifo:out_data -> system_console_avalon_jtag_slave_agent:rf_sink_data
	wire          system_console_avalon_jtag_slave_agent_rsp_fifo_out_ready;                   // system_console_avalon_jtag_slave_agent:rf_sink_ready -> system_console_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          system_console_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;           // system_console_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> system_console_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          system_console_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;             // system_console_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> system_console_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          system_console_avalon_jtag_slave_agent_rdata_fifo_src_valid;                 // system_console_avalon_jtag_slave_agent:rdata_fifo_src_valid -> system_console_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] system_console_avalon_jtag_slave_agent_rdata_fifo_src_data;                  // system_console_avalon_jtag_slave_agent:rdata_fifo_src_data -> system_console_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          system_console_avalon_jtag_slave_agent_rdata_fifo_src_ready;                 // system_console_avalon_jtag_slave_agent_rdata_fifo:in_ready -> system_console_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire   [31:0] alt_vip_vfr_0_avalon_slave_agent_m0_readdata;                                // alt_vip_vfr_0_avalon_slave_translator:uav_readdata -> alt_vip_vfr_0_avalon_slave_agent:m0_readdata
	wire          alt_vip_vfr_0_avalon_slave_agent_m0_waitrequest;                             // alt_vip_vfr_0_avalon_slave_translator:uav_waitrequest -> alt_vip_vfr_0_avalon_slave_agent:m0_waitrequest
	wire          alt_vip_vfr_0_avalon_slave_agent_m0_debugaccess;                             // alt_vip_vfr_0_avalon_slave_agent:m0_debugaccess -> alt_vip_vfr_0_avalon_slave_translator:uav_debugaccess
	wire   [20:0] alt_vip_vfr_0_avalon_slave_agent_m0_address;                                 // alt_vip_vfr_0_avalon_slave_agent:m0_address -> alt_vip_vfr_0_avalon_slave_translator:uav_address
	wire    [3:0] alt_vip_vfr_0_avalon_slave_agent_m0_byteenable;                              // alt_vip_vfr_0_avalon_slave_agent:m0_byteenable -> alt_vip_vfr_0_avalon_slave_translator:uav_byteenable
	wire          alt_vip_vfr_0_avalon_slave_agent_m0_read;                                    // alt_vip_vfr_0_avalon_slave_agent:m0_read -> alt_vip_vfr_0_avalon_slave_translator:uav_read
	wire          alt_vip_vfr_0_avalon_slave_agent_m0_readdatavalid;                           // alt_vip_vfr_0_avalon_slave_translator:uav_readdatavalid -> alt_vip_vfr_0_avalon_slave_agent:m0_readdatavalid
	wire          alt_vip_vfr_0_avalon_slave_agent_m0_lock;                                    // alt_vip_vfr_0_avalon_slave_agent:m0_lock -> alt_vip_vfr_0_avalon_slave_translator:uav_lock
	wire   [31:0] alt_vip_vfr_0_avalon_slave_agent_m0_writedata;                               // alt_vip_vfr_0_avalon_slave_agent:m0_writedata -> alt_vip_vfr_0_avalon_slave_translator:uav_writedata
	wire          alt_vip_vfr_0_avalon_slave_agent_m0_write;                                   // alt_vip_vfr_0_avalon_slave_agent:m0_write -> alt_vip_vfr_0_avalon_slave_translator:uav_write
	wire    [2:0] alt_vip_vfr_0_avalon_slave_agent_m0_burstcount;                              // alt_vip_vfr_0_avalon_slave_agent:m0_burstcount -> alt_vip_vfr_0_avalon_slave_translator:uav_burstcount
	wire          alt_vip_vfr_0_avalon_slave_agent_rf_source_valid;                            // alt_vip_vfr_0_avalon_slave_agent:rf_source_valid -> alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:in_valid
	wire  [116:0] alt_vip_vfr_0_avalon_slave_agent_rf_source_data;                             // alt_vip_vfr_0_avalon_slave_agent:rf_source_data -> alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:in_data
	wire          alt_vip_vfr_0_avalon_slave_agent_rf_source_ready;                            // alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:in_ready -> alt_vip_vfr_0_avalon_slave_agent:rf_source_ready
	wire          alt_vip_vfr_0_avalon_slave_agent_rf_source_startofpacket;                    // alt_vip_vfr_0_avalon_slave_agent:rf_source_startofpacket -> alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire          alt_vip_vfr_0_avalon_slave_agent_rf_source_endofpacket;                      // alt_vip_vfr_0_avalon_slave_agent:rf_source_endofpacket -> alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire          alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_valid;                         // alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:out_valid -> alt_vip_vfr_0_avalon_slave_agent:rf_sink_valid
	wire  [116:0] alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_data;                          // alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:out_data -> alt_vip_vfr_0_avalon_slave_agent:rf_sink_data
	wire          alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_ready;                         // alt_vip_vfr_0_avalon_slave_agent:rf_sink_ready -> alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:out_ready
	wire          alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_startofpacket;                 // alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:out_startofpacket -> alt_vip_vfr_0_avalon_slave_agent:rf_sink_startofpacket
	wire          alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_endofpacket;                   // alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:out_endofpacket -> alt_vip_vfr_0_avalon_slave_agent:rf_sink_endofpacket
	wire          alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_valid;                       // alt_vip_vfr_0_avalon_slave_agent:rdata_fifo_src_valid -> alt_vip_vfr_0_avalon_slave_agent_rdata_fifo:in_valid
	wire   [33:0] alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_data;                        // alt_vip_vfr_0_avalon_slave_agent:rdata_fifo_src_data -> alt_vip_vfr_0_avalon_slave_agent_rdata_fifo:in_data
	wire          alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_ready;                       // alt_vip_vfr_0_avalon_slave_agent_rdata_fifo:in_ready -> alt_vip_vfr_0_avalon_slave_agent:rdata_fifo_src_ready
	wire   [31:0] reg32_avalon_interface_0_avalon_slave_0_agent_m0_readdata;                   // reg32_avalon_interface_0_avalon_slave_0_translator:uav_readdata -> reg32_avalon_interface_0_avalon_slave_0_agent:m0_readdata
	wire          reg32_avalon_interface_0_avalon_slave_0_agent_m0_waitrequest;                // reg32_avalon_interface_0_avalon_slave_0_translator:uav_waitrequest -> reg32_avalon_interface_0_avalon_slave_0_agent:m0_waitrequest
	wire          reg32_avalon_interface_0_avalon_slave_0_agent_m0_debugaccess;                // reg32_avalon_interface_0_avalon_slave_0_agent:m0_debugaccess -> reg32_avalon_interface_0_avalon_slave_0_translator:uav_debugaccess
	wire   [20:0] reg32_avalon_interface_0_avalon_slave_0_agent_m0_address;                    // reg32_avalon_interface_0_avalon_slave_0_agent:m0_address -> reg32_avalon_interface_0_avalon_slave_0_translator:uav_address
	wire    [3:0] reg32_avalon_interface_0_avalon_slave_0_agent_m0_byteenable;                 // reg32_avalon_interface_0_avalon_slave_0_agent:m0_byteenable -> reg32_avalon_interface_0_avalon_slave_0_translator:uav_byteenable
	wire          reg32_avalon_interface_0_avalon_slave_0_agent_m0_read;                       // reg32_avalon_interface_0_avalon_slave_0_agent:m0_read -> reg32_avalon_interface_0_avalon_slave_0_translator:uav_read
	wire          reg32_avalon_interface_0_avalon_slave_0_agent_m0_readdatavalid;              // reg32_avalon_interface_0_avalon_slave_0_translator:uav_readdatavalid -> reg32_avalon_interface_0_avalon_slave_0_agent:m0_readdatavalid
	wire          reg32_avalon_interface_0_avalon_slave_0_agent_m0_lock;                       // reg32_avalon_interface_0_avalon_slave_0_agent:m0_lock -> reg32_avalon_interface_0_avalon_slave_0_translator:uav_lock
	wire   [31:0] reg32_avalon_interface_0_avalon_slave_0_agent_m0_writedata;                  // reg32_avalon_interface_0_avalon_slave_0_agent:m0_writedata -> reg32_avalon_interface_0_avalon_slave_0_translator:uav_writedata
	wire          reg32_avalon_interface_0_avalon_slave_0_agent_m0_write;                      // reg32_avalon_interface_0_avalon_slave_0_agent:m0_write -> reg32_avalon_interface_0_avalon_slave_0_translator:uav_write
	wire    [2:0] reg32_avalon_interface_0_avalon_slave_0_agent_m0_burstcount;                 // reg32_avalon_interface_0_avalon_slave_0_agent:m0_burstcount -> reg32_avalon_interface_0_avalon_slave_0_translator:uav_burstcount
	wire          reg32_avalon_interface_0_avalon_slave_0_agent_rf_source_valid;               // reg32_avalon_interface_0_avalon_slave_0_agent:rf_source_valid -> reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [116:0] reg32_avalon_interface_0_avalon_slave_0_agent_rf_source_data;                // reg32_avalon_interface_0_avalon_slave_0_agent:rf_source_data -> reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire          reg32_avalon_interface_0_avalon_slave_0_agent_rf_source_ready;               // reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo:in_ready -> reg32_avalon_interface_0_avalon_slave_0_agent:rf_source_ready
	wire          reg32_avalon_interface_0_avalon_slave_0_agent_rf_source_startofpacket;       // reg32_avalon_interface_0_avalon_slave_0_agent:rf_source_startofpacket -> reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          reg32_avalon_interface_0_avalon_slave_0_agent_rf_source_endofpacket;         // reg32_avalon_interface_0_avalon_slave_0_agent:rf_source_endofpacket -> reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo_out_valid;            // reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo:out_valid -> reg32_avalon_interface_0_avalon_slave_0_agent:rf_sink_valid
	wire  [116:0] reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo_out_data;             // reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo:out_data -> reg32_avalon_interface_0_avalon_slave_0_agent:rf_sink_data
	wire          reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo_out_ready;            // reg32_avalon_interface_0_avalon_slave_0_agent:rf_sink_ready -> reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;    // reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> reg32_avalon_interface_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire          reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;      // reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> reg32_avalon_interface_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire          reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo_src_valid;          // reg32_avalon_interface_0_avalon_slave_0_agent:rdata_fifo_src_valid -> reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo_src_data;           // reg32_avalon_interface_0_avalon_slave_0_agent:rdata_fifo_src_data -> reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo:in_data
	wire          reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo_src_ready;          // reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo:in_ready -> reg32_avalon_interface_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_readdata;                                // sysid_qsys_0_control_slave_translator:uav_readdata -> sysid_qsys_0_control_slave_agent:m0_readdata
	wire          sysid_qsys_0_control_slave_agent_m0_waitrequest;                             // sysid_qsys_0_control_slave_translator:uav_waitrequest -> sysid_qsys_0_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_0_control_slave_agent_m0_debugaccess;                             // sysid_qsys_0_control_slave_agent:m0_debugaccess -> sysid_qsys_0_control_slave_translator:uav_debugaccess
	wire   [20:0] sysid_qsys_0_control_slave_agent_m0_address;                                 // sysid_qsys_0_control_slave_agent:m0_address -> sysid_qsys_0_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_0_control_slave_agent_m0_byteenable;                              // sysid_qsys_0_control_slave_agent:m0_byteenable -> sysid_qsys_0_control_slave_translator:uav_byteenable
	wire          sysid_qsys_0_control_slave_agent_m0_read;                                    // sysid_qsys_0_control_slave_agent:m0_read -> sysid_qsys_0_control_slave_translator:uav_read
	wire          sysid_qsys_0_control_slave_agent_m0_readdatavalid;                           // sysid_qsys_0_control_slave_translator:uav_readdatavalid -> sysid_qsys_0_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_0_control_slave_agent_m0_lock;                                    // sysid_qsys_0_control_slave_agent:m0_lock -> sysid_qsys_0_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_writedata;                               // sysid_qsys_0_control_slave_agent:m0_writedata -> sysid_qsys_0_control_slave_translator:uav_writedata
	wire          sysid_qsys_0_control_slave_agent_m0_write;                                   // sysid_qsys_0_control_slave_agent:m0_write -> sysid_qsys_0_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_0_control_slave_agent_m0_burstcount;                              // sysid_qsys_0_control_slave_agent:m0_burstcount -> sysid_qsys_0_control_slave_translator:uav_burstcount
	wire          sysid_qsys_0_control_slave_agent_rf_source_valid;                            // sysid_qsys_0_control_slave_agent:rf_source_valid -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_valid
	wire  [116:0] sysid_qsys_0_control_slave_agent_rf_source_data;                             // sysid_qsys_0_control_slave_agent:rf_source_data -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_0_control_slave_agent_rf_source_ready;                            // sysid_qsys_0_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rf_source_ready
	wire          sysid_qsys_0_control_slave_agent_rf_source_startofpacket;                    // sysid_qsys_0_control_slave_agent:rf_source_startofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rf_source_endofpacket;                      // sysid_qsys_0_control_slave_agent:rf_source_endofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid;                         // sysid_qsys_0_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_0_control_slave_agent:rf_sink_valid
	wire  [116:0] sysid_qsys_0_control_slave_agent_rsp_fifo_out_data;                          // sysid_qsys_0_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_0_control_slave_agent:rf_sink_data
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready;                         // sysid_qsys_0_control_slave_agent:rf_sink_ready -> sysid_qsys_0_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket;                 // sysid_qsys_0_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket;                   // sysid_qsys_0_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid;                       // sysid_qsys_0_control_slave_agent:rdata_fifo_src_valid -> sysid_qsys_0_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_qsys_0_control_slave_agent_rdata_fifo_src_data;                        // sysid_qsys_0_control_slave_agent:rdata_fifo_src_data -> sysid_qsys_0_control_slave_agent_rdata_fifo:in_data
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready;                       // sysid_qsys_0_control_slave_agent_rdata_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] fifo_hps_to_fpga_in_csr_agent_m0_readdata;                                   // fifo_hps_to_fpga_in_csr_translator:uav_readdata -> fifo_hps_to_fpga_in_csr_agent:m0_readdata
	wire          fifo_hps_to_fpga_in_csr_agent_m0_waitrequest;                                // fifo_hps_to_fpga_in_csr_translator:uav_waitrequest -> fifo_hps_to_fpga_in_csr_agent:m0_waitrequest
	wire          fifo_hps_to_fpga_in_csr_agent_m0_debugaccess;                                // fifo_hps_to_fpga_in_csr_agent:m0_debugaccess -> fifo_hps_to_fpga_in_csr_translator:uav_debugaccess
	wire   [20:0] fifo_hps_to_fpga_in_csr_agent_m0_address;                                    // fifo_hps_to_fpga_in_csr_agent:m0_address -> fifo_hps_to_fpga_in_csr_translator:uav_address
	wire    [3:0] fifo_hps_to_fpga_in_csr_agent_m0_byteenable;                                 // fifo_hps_to_fpga_in_csr_agent:m0_byteenable -> fifo_hps_to_fpga_in_csr_translator:uav_byteenable
	wire          fifo_hps_to_fpga_in_csr_agent_m0_read;                                       // fifo_hps_to_fpga_in_csr_agent:m0_read -> fifo_hps_to_fpga_in_csr_translator:uav_read
	wire          fifo_hps_to_fpga_in_csr_agent_m0_readdatavalid;                              // fifo_hps_to_fpga_in_csr_translator:uav_readdatavalid -> fifo_hps_to_fpga_in_csr_agent:m0_readdatavalid
	wire          fifo_hps_to_fpga_in_csr_agent_m0_lock;                                       // fifo_hps_to_fpga_in_csr_agent:m0_lock -> fifo_hps_to_fpga_in_csr_translator:uav_lock
	wire   [31:0] fifo_hps_to_fpga_in_csr_agent_m0_writedata;                                  // fifo_hps_to_fpga_in_csr_agent:m0_writedata -> fifo_hps_to_fpga_in_csr_translator:uav_writedata
	wire          fifo_hps_to_fpga_in_csr_agent_m0_write;                                      // fifo_hps_to_fpga_in_csr_agent:m0_write -> fifo_hps_to_fpga_in_csr_translator:uav_write
	wire    [2:0] fifo_hps_to_fpga_in_csr_agent_m0_burstcount;                                 // fifo_hps_to_fpga_in_csr_agent:m0_burstcount -> fifo_hps_to_fpga_in_csr_translator:uav_burstcount
	wire          fifo_hps_to_fpga_in_csr_agent_rf_source_valid;                               // fifo_hps_to_fpga_in_csr_agent:rf_source_valid -> fifo_hps_to_fpga_in_csr_agent_rsp_fifo:in_valid
	wire  [116:0] fifo_hps_to_fpga_in_csr_agent_rf_source_data;                                // fifo_hps_to_fpga_in_csr_agent:rf_source_data -> fifo_hps_to_fpga_in_csr_agent_rsp_fifo:in_data
	wire          fifo_hps_to_fpga_in_csr_agent_rf_source_ready;                               // fifo_hps_to_fpga_in_csr_agent_rsp_fifo:in_ready -> fifo_hps_to_fpga_in_csr_agent:rf_source_ready
	wire          fifo_hps_to_fpga_in_csr_agent_rf_source_startofpacket;                       // fifo_hps_to_fpga_in_csr_agent:rf_source_startofpacket -> fifo_hps_to_fpga_in_csr_agent_rsp_fifo:in_startofpacket
	wire          fifo_hps_to_fpga_in_csr_agent_rf_source_endofpacket;                         // fifo_hps_to_fpga_in_csr_agent:rf_source_endofpacket -> fifo_hps_to_fpga_in_csr_agent_rsp_fifo:in_endofpacket
	wire          fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_valid;                            // fifo_hps_to_fpga_in_csr_agent_rsp_fifo:out_valid -> fifo_hps_to_fpga_in_csr_agent:rf_sink_valid
	wire  [116:0] fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_data;                             // fifo_hps_to_fpga_in_csr_agent_rsp_fifo:out_data -> fifo_hps_to_fpga_in_csr_agent:rf_sink_data
	wire          fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_ready;                            // fifo_hps_to_fpga_in_csr_agent:rf_sink_ready -> fifo_hps_to_fpga_in_csr_agent_rsp_fifo:out_ready
	wire          fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_startofpacket;                    // fifo_hps_to_fpga_in_csr_agent_rsp_fifo:out_startofpacket -> fifo_hps_to_fpga_in_csr_agent:rf_sink_startofpacket
	wire          fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_endofpacket;                      // fifo_hps_to_fpga_in_csr_agent_rsp_fifo:out_endofpacket -> fifo_hps_to_fpga_in_csr_agent:rf_sink_endofpacket
	wire          fifo_hps_to_fpga_in_csr_agent_rdata_fifo_src_valid;                          // fifo_hps_to_fpga_in_csr_agent:rdata_fifo_src_valid -> fifo_hps_to_fpga_in_csr_agent_rdata_fifo:in_valid
	wire   [33:0] fifo_hps_to_fpga_in_csr_agent_rdata_fifo_src_data;                           // fifo_hps_to_fpga_in_csr_agent:rdata_fifo_src_data -> fifo_hps_to_fpga_in_csr_agent_rdata_fifo:in_data
	wire          fifo_hps_to_fpga_in_csr_agent_rdata_fifo_src_ready;                          // fifo_hps_to_fpga_in_csr_agent_rdata_fifo:in_ready -> fifo_hps_to_fpga_in_csr_agent:rdata_fifo_src_ready
	wire   [31:0] fifo_fpga_to_hps_out_csr_agent_m0_readdata;                                  // fifo_fpga_to_hps_out_csr_translator:uav_readdata -> fifo_fpga_to_hps_out_csr_agent:m0_readdata
	wire          fifo_fpga_to_hps_out_csr_agent_m0_waitrequest;                               // fifo_fpga_to_hps_out_csr_translator:uav_waitrequest -> fifo_fpga_to_hps_out_csr_agent:m0_waitrequest
	wire          fifo_fpga_to_hps_out_csr_agent_m0_debugaccess;                               // fifo_fpga_to_hps_out_csr_agent:m0_debugaccess -> fifo_fpga_to_hps_out_csr_translator:uav_debugaccess
	wire   [20:0] fifo_fpga_to_hps_out_csr_agent_m0_address;                                   // fifo_fpga_to_hps_out_csr_agent:m0_address -> fifo_fpga_to_hps_out_csr_translator:uav_address
	wire    [3:0] fifo_fpga_to_hps_out_csr_agent_m0_byteenable;                                // fifo_fpga_to_hps_out_csr_agent:m0_byteenable -> fifo_fpga_to_hps_out_csr_translator:uav_byteenable
	wire          fifo_fpga_to_hps_out_csr_agent_m0_read;                                      // fifo_fpga_to_hps_out_csr_agent:m0_read -> fifo_fpga_to_hps_out_csr_translator:uav_read
	wire          fifo_fpga_to_hps_out_csr_agent_m0_readdatavalid;                             // fifo_fpga_to_hps_out_csr_translator:uav_readdatavalid -> fifo_fpga_to_hps_out_csr_agent:m0_readdatavalid
	wire          fifo_fpga_to_hps_out_csr_agent_m0_lock;                                      // fifo_fpga_to_hps_out_csr_agent:m0_lock -> fifo_fpga_to_hps_out_csr_translator:uav_lock
	wire   [31:0] fifo_fpga_to_hps_out_csr_agent_m0_writedata;                                 // fifo_fpga_to_hps_out_csr_agent:m0_writedata -> fifo_fpga_to_hps_out_csr_translator:uav_writedata
	wire          fifo_fpga_to_hps_out_csr_agent_m0_write;                                     // fifo_fpga_to_hps_out_csr_agent:m0_write -> fifo_fpga_to_hps_out_csr_translator:uav_write
	wire    [2:0] fifo_fpga_to_hps_out_csr_agent_m0_burstcount;                                // fifo_fpga_to_hps_out_csr_agent:m0_burstcount -> fifo_fpga_to_hps_out_csr_translator:uav_burstcount
	wire          fifo_fpga_to_hps_out_csr_agent_rf_source_valid;                              // fifo_fpga_to_hps_out_csr_agent:rf_source_valid -> fifo_fpga_to_hps_out_csr_agent_rsp_fifo:in_valid
	wire  [116:0] fifo_fpga_to_hps_out_csr_agent_rf_source_data;                               // fifo_fpga_to_hps_out_csr_agent:rf_source_data -> fifo_fpga_to_hps_out_csr_agent_rsp_fifo:in_data
	wire          fifo_fpga_to_hps_out_csr_agent_rf_source_ready;                              // fifo_fpga_to_hps_out_csr_agent_rsp_fifo:in_ready -> fifo_fpga_to_hps_out_csr_agent:rf_source_ready
	wire          fifo_fpga_to_hps_out_csr_agent_rf_source_startofpacket;                      // fifo_fpga_to_hps_out_csr_agent:rf_source_startofpacket -> fifo_fpga_to_hps_out_csr_agent_rsp_fifo:in_startofpacket
	wire          fifo_fpga_to_hps_out_csr_agent_rf_source_endofpacket;                        // fifo_fpga_to_hps_out_csr_agent:rf_source_endofpacket -> fifo_fpga_to_hps_out_csr_agent_rsp_fifo:in_endofpacket
	wire          fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_valid;                           // fifo_fpga_to_hps_out_csr_agent_rsp_fifo:out_valid -> fifo_fpga_to_hps_out_csr_agent:rf_sink_valid
	wire  [116:0] fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_data;                            // fifo_fpga_to_hps_out_csr_agent_rsp_fifo:out_data -> fifo_fpga_to_hps_out_csr_agent:rf_sink_data
	wire          fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_ready;                           // fifo_fpga_to_hps_out_csr_agent:rf_sink_ready -> fifo_fpga_to_hps_out_csr_agent_rsp_fifo:out_ready
	wire          fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_startofpacket;                   // fifo_fpga_to_hps_out_csr_agent_rsp_fifo:out_startofpacket -> fifo_fpga_to_hps_out_csr_agent:rf_sink_startofpacket
	wire          fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_endofpacket;                     // fifo_fpga_to_hps_out_csr_agent_rsp_fifo:out_endofpacket -> fifo_fpga_to_hps_out_csr_agent:rf_sink_endofpacket
	wire          fifo_fpga_to_hps_out_csr_agent_rdata_fifo_src_valid;                         // fifo_fpga_to_hps_out_csr_agent:rdata_fifo_src_valid -> fifo_fpga_to_hps_out_csr_agent_rdata_fifo:in_valid
	wire   [33:0] fifo_fpga_to_hps_out_csr_agent_rdata_fifo_src_data;                          // fifo_fpga_to_hps_out_csr_agent:rdata_fifo_src_data -> fifo_fpga_to_hps_out_csr_agent_rdata_fifo:in_data
	wire          fifo_fpga_to_hps_out_csr_agent_rdata_fifo_src_ready;                         // fifo_fpga_to_hps_out_csr_agent_rdata_fifo:in_ready -> fifo_fpga_to_hps_out_csr_agent:rdata_fifo_src_ready
	wire   [31:0] hex5_hex0_s1_agent_m0_readdata;                                              // hex5_hex0_s1_translator:uav_readdata -> hex5_hex0_s1_agent:m0_readdata
	wire          hex5_hex0_s1_agent_m0_waitrequest;                                           // hex5_hex0_s1_translator:uav_waitrequest -> hex5_hex0_s1_agent:m0_waitrequest
	wire          hex5_hex0_s1_agent_m0_debugaccess;                                           // hex5_hex0_s1_agent:m0_debugaccess -> hex5_hex0_s1_translator:uav_debugaccess
	wire   [20:0] hex5_hex0_s1_agent_m0_address;                                               // hex5_hex0_s1_agent:m0_address -> hex5_hex0_s1_translator:uav_address
	wire    [3:0] hex5_hex0_s1_agent_m0_byteenable;                                            // hex5_hex0_s1_agent:m0_byteenable -> hex5_hex0_s1_translator:uav_byteenable
	wire          hex5_hex0_s1_agent_m0_read;                                                  // hex5_hex0_s1_agent:m0_read -> hex5_hex0_s1_translator:uav_read
	wire          hex5_hex0_s1_agent_m0_readdatavalid;                                         // hex5_hex0_s1_translator:uav_readdatavalid -> hex5_hex0_s1_agent:m0_readdatavalid
	wire          hex5_hex0_s1_agent_m0_lock;                                                  // hex5_hex0_s1_agent:m0_lock -> hex5_hex0_s1_translator:uav_lock
	wire   [31:0] hex5_hex0_s1_agent_m0_writedata;                                             // hex5_hex0_s1_agent:m0_writedata -> hex5_hex0_s1_translator:uav_writedata
	wire          hex5_hex0_s1_agent_m0_write;                                                 // hex5_hex0_s1_agent:m0_write -> hex5_hex0_s1_translator:uav_write
	wire    [2:0] hex5_hex0_s1_agent_m0_burstcount;                                            // hex5_hex0_s1_agent:m0_burstcount -> hex5_hex0_s1_translator:uav_burstcount
	wire          hex5_hex0_s1_agent_rf_source_valid;                                          // hex5_hex0_s1_agent:rf_source_valid -> hex5_hex0_s1_agent_rsp_fifo:in_valid
	wire  [116:0] hex5_hex0_s1_agent_rf_source_data;                                           // hex5_hex0_s1_agent:rf_source_data -> hex5_hex0_s1_agent_rsp_fifo:in_data
	wire          hex5_hex0_s1_agent_rf_source_ready;                                          // hex5_hex0_s1_agent_rsp_fifo:in_ready -> hex5_hex0_s1_agent:rf_source_ready
	wire          hex5_hex0_s1_agent_rf_source_startofpacket;                                  // hex5_hex0_s1_agent:rf_source_startofpacket -> hex5_hex0_s1_agent_rsp_fifo:in_startofpacket
	wire          hex5_hex0_s1_agent_rf_source_endofpacket;                                    // hex5_hex0_s1_agent:rf_source_endofpacket -> hex5_hex0_s1_agent_rsp_fifo:in_endofpacket
	wire          hex5_hex0_s1_agent_rsp_fifo_out_valid;                                       // hex5_hex0_s1_agent_rsp_fifo:out_valid -> hex5_hex0_s1_agent:rf_sink_valid
	wire  [116:0] hex5_hex0_s1_agent_rsp_fifo_out_data;                                        // hex5_hex0_s1_agent_rsp_fifo:out_data -> hex5_hex0_s1_agent:rf_sink_data
	wire          hex5_hex0_s1_agent_rsp_fifo_out_ready;                                       // hex5_hex0_s1_agent:rf_sink_ready -> hex5_hex0_s1_agent_rsp_fifo:out_ready
	wire          hex5_hex0_s1_agent_rsp_fifo_out_startofpacket;                               // hex5_hex0_s1_agent_rsp_fifo:out_startofpacket -> hex5_hex0_s1_agent:rf_sink_startofpacket
	wire          hex5_hex0_s1_agent_rsp_fifo_out_endofpacket;                                 // hex5_hex0_s1_agent_rsp_fifo:out_endofpacket -> hex5_hex0_s1_agent:rf_sink_endofpacket
	wire          hex5_hex0_s1_agent_rdata_fifo_src_valid;                                     // hex5_hex0_s1_agent:rdata_fifo_src_valid -> hex5_hex0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] hex5_hex0_s1_agent_rdata_fifo_src_data;                                      // hex5_hex0_s1_agent:rdata_fifo_src_data -> hex5_hex0_s1_agent_rdata_fifo:in_data
	wire          hex5_hex0_s1_agent_rdata_fifo_src_ready;                                     // hex5_hex0_s1_agent_rdata_fifo:in_ready -> hex5_hex0_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pushbuttons_s1_agent_m0_readdata;                                            // pushbuttons_s1_translator:uav_readdata -> pushbuttons_s1_agent:m0_readdata
	wire          pushbuttons_s1_agent_m0_waitrequest;                                         // pushbuttons_s1_translator:uav_waitrequest -> pushbuttons_s1_agent:m0_waitrequest
	wire          pushbuttons_s1_agent_m0_debugaccess;                                         // pushbuttons_s1_agent:m0_debugaccess -> pushbuttons_s1_translator:uav_debugaccess
	wire   [20:0] pushbuttons_s1_agent_m0_address;                                             // pushbuttons_s1_agent:m0_address -> pushbuttons_s1_translator:uav_address
	wire    [3:0] pushbuttons_s1_agent_m0_byteenable;                                          // pushbuttons_s1_agent:m0_byteenable -> pushbuttons_s1_translator:uav_byteenable
	wire          pushbuttons_s1_agent_m0_read;                                                // pushbuttons_s1_agent:m0_read -> pushbuttons_s1_translator:uav_read
	wire          pushbuttons_s1_agent_m0_readdatavalid;                                       // pushbuttons_s1_translator:uav_readdatavalid -> pushbuttons_s1_agent:m0_readdatavalid
	wire          pushbuttons_s1_agent_m0_lock;                                                // pushbuttons_s1_agent:m0_lock -> pushbuttons_s1_translator:uav_lock
	wire   [31:0] pushbuttons_s1_agent_m0_writedata;                                           // pushbuttons_s1_agent:m0_writedata -> pushbuttons_s1_translator:uav_writedata
	wire          pushbuttons_s1_agent_m0_write;                                               // pushbuttons_s1_agent:m0_write -> pushbuttons_s1_translator:uav_write
	wire    [2:0] pushbuttons_s1_agent_m0_burstcount;                                          // pushbuttons_s1_agent:m0_burstcount -> pushbuttons_s1_translator:uav_burstcount
	wire          pushbuttons_s1_agent_rf_source_valid;                                        // pushbuttons_s1_agent:rf_source_valid -> pushbuttons_s1_agent_rsp_fifo:in_valid
	wire  [116:0] pushbuttons_s1_agent_rf_source_data;                                         // pushbuttons_s1_agent:rf_source_data -> pushbuttons_s1_agent_rsp_fifo:in_data
	wire          pushbuttons_s1_agent_rf_source_ready;                                        // pushbuttons_s1_agent_rsp_fifo:in_ready -> pushbuttons_s1_agent:rf_source_ready
	wire          pushbuttons_s1_agent_rf_source_startofpacket;                                // pushbuttons_s1_agent:rf_source_startofpacket -> pushbuttons_s1_agent_rsp_fifo:in_startofpacket
	wire          pushbuttons_s1_agent_rf_source_endofpacket;                                  // pushbuttons_s1_agent:rf_source_endofpacket -> pushbuttons_s1_agent_rsp_fifo:in_endofpacket
	wire          pushbuttons_s1_agent_rsp_fifo_out_valid;                                     // pushbuttons_s1_agent_rsp_fifo:out_valid -> pushbuttons_s1_agent:rf_sink_valid
	wire  [116:0] pushbuttons_s1_agent_rsp_fifo_out_data;                                      // pushbuttons_s1_agent_rsp_fifo:out_data -> pushbuttons_s1_agent:rf_sink_data
	wire          pushbuttons_s1_agent_rsp_fifo_out_ready;                                     // pushbuttons_s1_agent:rf_sink_ready -> pushbuttons_s1_agent_rsp_fifo:out_ready
	wire          pushbuttons_s1_agent_rsp_fifo_out_startofpacket;                             // pushbuttons_s1_agent_rsp_fifo:out_startofpacket -> pushbuttons_s1_agent:rf_sink_startofpacket
	wire          pushbuttons_s1_agent_rsp_fifo_out_endofpacket;                               // pushbuttons_s1_agent_rsp_fifo:out_endofpacket -> pushbuttons_s1_agent:rf_sink_endofpacket
	wire          pushbuttons_s1_agent_rdata_fifo_src_valid;                                   // pushbuttons_s1_agent:rdata_fifo_src_valid -> pushbuttons_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pushbuttons_s1_agent_rdata_fifo_src_data;                                    // pushbuttons_s1_agent:rdata_fifo_src_data -> pushbuttons_s1_agent_rdata_fifo:in_data
	wire          pushbuttons_s1_agent_rdata_fifo_src_ready;                                   // pushbuttons_s1_agent_rdata_fifo:in_ready -> pushbuttons_s1_agent:rdata_fifo_src_ready
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid;                           // Arm_A9_HPS_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [115:0] arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data;                            // Arm_A9_HPS_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready;                           // router:sink_ready -> Arm_A9_HPS_h2f_lw_axi_master_agent:write_cp_ready
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket;                   // Arm_A9_HPS_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket;                     // Arm_A9_HPS_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid;                            // Arm_A9_HPS_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [115:0] arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data;                             // Arm_A9_HPS_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready;                            // router_001:sink_ready -> Arm_A9_HPS_h2f_lw_axi_master_agent:read_cp_ready
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket;                    // Arm_A9_HPS_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket;                      // Arm_A9_HPS_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          system_console_avalon_jtag_slave_agent_rp_valid;                             // system_console_avalon_jtag_slave_agent:rp_valid -> router_002:sink_valid
	wire  [115:0] system_console_avalon_jtag_slave_agent_rp_data;                              // system_console_avalon_jtag_slave_agent:rp_data -> router_002:sink_data
	wire          system_console_avalon_jtag_slave_agent_rp_ready;                             // router_002:sink_ready -> system_console_avalon_jtag_slave_agent:rp_ready
	wire          system_console_avalon_jtag_slave_agent_rp_startofpacket;                     // system_console_avalon_jtag_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          system_console_avalon_jtag_slave_agent_rp_endofpacket;                       // system_console_avalon_jtag_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                        // router_002:src_valid -> rsp_demux:sink_valid
	wire  [115:0] router_002_src_data;                                                         // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                        // rsp_demux:sink_ready -> router_002:src_ready
	wire    [7:0] router_002_src_channel;                                                      // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                  // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          alt_vip_vfr_0_avalon_slave_agent_rp_valid;                                   // alt_vip_vfr_0_avalon_slave_agent:rp_valid -> router_003:sink_valid
	wire  [115:0] alt_vip_vfr_0_avalon_slave_agent_rp_data;                                    // alt_vip_vfr_0_avalon_slave_agent:rp_data -> router_003:sink_data
	wire          alt_vip_vfr_0_avalon_slave_agent_rp_ready;                                   // router_003:sink_ready -> alt_vip_vfr_0_avalon_slave_agent:rp_ready
	wire          alt_vip_vfr_0_avalon_slave_agent_rp_startofpacket;                           // alt_vip_vfr_0_avalon_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          alt_vip_vfr_0_avalon_slave_agent_rp_endofpacket;                             // alt_vip_vfr_0_avalon_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                        // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [115:0] router_003_src_data;                                                         // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                        // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [7:0] router_003_src_channel;                                                      // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                                // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                  // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          reg32_avalon_interface_0_avalon_slave_0_agent_rp_valid;                      // reg32_avalon_interface_0_avalon_slave_0_agent:rp_valid -> router_004:sink_valid
	wire  [115:0] reg32_avalon_interface_0_avalon_slave_0_agent_rp_data;                       // reg32_avalon_interface_0_avalon_slave_0_agent:rp_data -> router_004:sink_data
	wire          reg32_avalon_interface_0_avalon_slave_0_agent_rp_ready;                      // router_004:sink_ready -> reg32_avalon_interface_0_avalon_slave_0_agent:rp_ready
	wire          reg32_avalon_interface_0_avalon_slave_0_agent_rp_startofpacket;              // reg32_avalon_interface_0_avalon_slave_0_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          reg32_avalon_interface_0_avalon_slave_0_agent_rp_endofpacket;                // reg32_avalon_interface_0_avalon_slave_0_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                        // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [115:0] router_004_src_data;                                                         // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                        // rsp_demux_002:sink_ready -> router_004:src_ready
	wire    [7:0] router_004_src_channel;                                                      // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                                // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                  // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_valid;                                   // sysid_qsys_0_control_slave_agent:rp_valid -> router_005:sink_valid
	wire  [115:0] sysid_qsys_0_control_slave_agent_rp_data;                                    // sysid_qsys_0_control_slave_agent:rp_data -> router_005:sink_data
	wire          sysid_qsys_0_control_slave_agent_rp_ready;                                   // router_005:sink_ready -> sysid_qsys_0_control_slave_agent:rp_ready
	wire          sysid_qsys_0_control_slave_agent_rp_startofpacket;                           // sysid_qsys_0_control_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_endofpacket;                             // sysid_qsys_0_control_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                        // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [115:0] router_005_src_data;                                                         // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                        // rsp_demux_003:sink_ready -> router_005:src_ready
	wire    [7:0] router_005_src_channel;                                                      // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                                // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                                  // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          fifo_hps_to_fpga_in_csr_agent_rp_valid;                                      // fifo_hps_to_fpga_in_csr_agent:rp_valid -> router_006:sink_valid
	wire  [115:0] fifo_hps_to_fpga_in_csr_agent_rp_data;                                       // fifo_hps_to_fpga_in_csr_agent:rp_data -> router_006:sink_data
	wire          fifo_hps_to_fpga_in_csr_agent_rp_ready;                                      // router_006:sink_ready -> fifo_hps_to_fpga_in_csr_agent:rp_ready
	wire          fifo_hps_to_fpga_in_csr_agent_rp_startofpacket;                              // fifo_hps_to_fpga_in_csr_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          fifo_hps_to_fpga_in_csr_agent_rp_endofpacket;                                // fifo_hps_to_fpga_in_csr_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                        // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [115:0] router_006_src_data;                                                         // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                        // rsp_demux_004:sink_ready -> router_006:src_ready
	wire    [7:0] router_006_src_channel;                                                      // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                                // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                                  // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          fifo_fpga_to_hps_out_csr_agent_rp_valid;                                     // fifo_fpga_to_hps_out_csr_agent:rp_valid -> router_007:sink_valid
	wire  [115:0] fifo_fpga_to_hps_out_csr_agent_rp_data;                                      // fifo_fpga_to_hps_out_csr_agent:rp_data -> router_007:sink_data
	wire          fifo_fpga_to_hps_out_csr_agent_rp_ready;                                     // router_007:sink_ready -> fifo_fpga_to_hps_out_csr_agent:rp_ready
	wire          fifo_fpga_to_hps_out_csr_agent_rp_startofpacket;                             // fifo_fpga_to_hps_out_csr_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          fifo_fpga_to_hps_out_csr_agent_rp_endofpacket;                               // fifo_fpga_to_hps_out_csr_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                        // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [115:0] router_007_src_data;                                                         // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                        // rsp_demux_005:sink_ready -> router_007:src_ready
	wire    [7:0] router_007_src_channel;                                                      // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                                // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                                  // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          hex5_hex0_s1_agent_rp_valid;                                                 // hex5_hex0_s1_agent:rp_valid -> router_008:sink_valid
	wire  [115:0] hex5_hex0_s1_agent_rp_data;                                                  // hex5_hex0_s1_agent:rp_data -> router_008:sink_data
	wire          hex5_hex0_s1_agent_rp_ready;                                                 // router_008:sink_ready -> hex5_hex0_s1_agent:rp_ready
	wire          hex5_hex0_s1_agent_rp_startofpacket;                                         // hex5_hex0_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          hex5_hex0_s1_agent_rp_endofpacket;                                           // hex5_hex0_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                        // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [115:0] router_008_src_data;                                                         // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                        // rsp_demux_006:sink_ready -> router_008:src_ready
	wire    [7:0] router_008_src_channel;                                                      // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                                // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                                  // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          pushbuttons_s1_agent_rp_valid;                                               // pushbuttons_s1_agent:rp_valid -> router_009:sink_valid
	wire  [115:0] pushbuttons_s1_agent_rp_data;                                                // pushbuttons_s1_agent:rp_data -> router_009:sink_data
	wire          pushbuttons_s1_agent_rp_ready;                                               // router_009:sink_ready -> pushbuttons_s1_agent:rp_ready
	wire          pushbuttons_s1_agent_rp_startofpacket;                                       // pushbuttons_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          pushbuttons_s1_agent_rp_endofpacket;                                         // pushbuttons_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                        // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [115:0] router_009_src_data;                                                         // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                        // rsp_demux_007:sink_ready -> router_009:src_ready
	wire    [7:0] router_009_src_channel;                                                      // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                                // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                                  // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          router_src_valid;                                                            // router:src_valid -> Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [115:0] router_src_data;                                                             // router:src_data -> Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                            // Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire    [7:0] router_src_channel;                                                          // router:src_channel -> Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                    // router:src_startofpacket -> Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                      // router:src_endofpacket -> Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [115:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data;                        // Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                       // cmd_demux:sink_ready -> Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire    [7:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                     // Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;               // Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;                 // Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                           // rsp_mux:src_valid -> Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [115:0] rsp_mux_src_data;                                                            // rsp_mux:src_data -> Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                           // Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [7:0] rsp_mux_src_channel;                                                         // rsp_mux:src_channel -> Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                   // rsp_mux:src_startofpacket -> Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                     // rsp_mux:src_endofpacket -> Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                       // Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> Arm_A9_HPS_h2f_lw_axi_master_agent:write_rp_valid
	wire  [115:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data;                        // Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_data -> Arm_A9_HPS_h2f_lw_axi_master_agent:write_rp_data
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                       // Arm_A9_HPS_h2f_lw_axi_master_agent:write_rp_ready -> Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire    [7:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                     // Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> Arm_A9_HPS_h2f_lw_axi_master_agent:write_rp_channel
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;               // Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> Arm_A9_HPS_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;                 // Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> Arm_A9_HPS_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                                        // router_001:src_valid -> Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [115:0] router_001_src_data;                                                         // router_001:src_data -> Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                        // Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [7:0] router_001_src_channel;                                                      // router_001:src_channel -> Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                // router_001:src_startofpacket -> Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                  // router_001:src_endofpacket -> Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [115:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data;                        // Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                       // cmd_demux_001:sink_ready -> Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire    [7:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                     // Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;               // Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;                 // Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                       // rsp_mux_001:src_valid -> Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [115:0] rsp_mux_001_src_data;                                                        // rsp_mux_001:src_data -> Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                       // Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [7:0] rsp_mux_001_src_channel;                                                     // rsp_mux_001:src_channel -> Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                               // rsp_mux_001:src_startofpacket -> Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                 // rsp_mux_001:src_endofpacket -> Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                       // Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> Arm_A9_HPS_h2f_lw_axi_master_agent:read_rp_valid
	wire  [115:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data;                        // Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_data -> Arm_A9_HPS_h2f_lw_axi_master_agent:read_rp_data
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                       // Arm_A9_HPS_h2f_lw_axi_master_agent:read_rp_ready -> Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire    [7:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                     // Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> Arm_A9_HPS_h2f_lw_axi_master_agent:read_rp_channel
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;               // Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> Arm_A9_HPS_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;                 // Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> Arm_A9_HPS_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                                           // cmd_mux:src_valid -> system_console_avalon_jtag_slave_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_src_data;                                                            // cmd_mux:src_data -> system_console_avalon_jtag_slave_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                           // system_console_avalon_jtag_slave_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [7:0] cmd_mux_src_channel;                                                         // cmd_mux:src_channel -> system_console_avalon_jtag_slave_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                   // cmd_mux:src_startofpacket -> system_console_avalon_jtag_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                     // cmd_mux:src_endofpacket -> system_console_avalon_jtag_slave_burst_adapter:sink0_endofpacket
	wire          system_console_avalon_jtag_slave_burst_adapter_source0_valid;                // system_console_avalon_jtag_slave_burst_adapter:source0_valid -> system_console_avalon_jtag_slave_agent:cp_valid
	wire  [115:0] system_console_avalon_jtag_slave_burst_adapter_source0_data;                 // system_console_avalon_jtag_slave_burst_adapter:source0_data -> system_console_avalon_jtag_slave_agent:cp_data
	wire          system_console_avalon_jtag_slave_burst_adapter_source0_ready;                // system_console_avalon_jtag_slave_agent:cp_ready -> system_console_avalon_jtag_slave_burst_adapter:source0_ready
	wire    [7:0] system_console_avalon_jtag_slave_burst_adapter_source0_channel;              // system_console_avalon_jtag_slave_burst_adapter:source0_channel -> system_console_avalon_jtag_slave_agent:cp_channel
	wire          system_console_avalon_jtag_slave_burst_adapter_source0_startofpacket;        // system_console_avalon_jtag_slave_burst_adapter:source0_startofpacket -> system_console_avalon_jtag_slave_agent:cp_startofpacket
	wire          system_console_avalon_jtag_slave_burst_adapter_source0_endofpacket;          // system_console_avalon_jtag_slave_burst_adapter:source0_endofpacket -> system_console_avalon_jtag_slave_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                       // cmd_mux_001:src_valid -> alt_vip_vfr_0_avalon_slave_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_001_src_data;                                                        // cmd_mux_001:src_data -> alt_vip_vfr_0_avalon_slave_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                       // alt_vip_vfr_0_avalon_slave_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [7:0] cmd_mux_001_src_channel;                                                     // cmd_mux_001:src_channel -> alt_vip_vfr_0_avalon_slave_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                               // cmd_mux_001:src_startofpacket -> alt_vip_vfr_0_avalon_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                 // cmd_mux_001:src_endofpacket -> alt_vip_vfr_0_avalon_slave_burst_adapter:sink0_endofpacket
	wire          alt_vip_vfr_0_avalon_slave_burst_adapter_source0_valid;                      // alt_vip_vfr_0_avalon_slave_burst_adapter:source0_valid -> alt_vip_vfr_0_avalon_slave_agent:cp_valid
	wire  [115:0] alt_vip_vfr_0_avalon_slave_burst_adapter_source0_data;                       // alt_vip_vfr_0_avalon_slave_burst_adapter:source0_data -> alt_vip_vfr_0_avalon_slave_agent:cp_data
	wire          alt_vip_vfr_0_avalon_slave_burst_adapter_source0_ready;                      // alt_vip_vfr_0_avalon_slave_agent:cp_ready -> alt_vip_vfr_0_avalon_slave_burst_adapter:source0_ready
	wire    [7:0] alt_vip_vfr_0_avalon_slave_burst_adapter_source0_channel;                    // alt_vip_vfr_0_avalon_slave_burst_adapter:source0_channel -> alt_vip_vfr_0_avalon_slave_agent:cp_channel
	wire          alt_vip_vfr_0_avalon_slave_burst_adapter_source0_startofpacket;              // alt_vip_vfr_0_avalon_slave_burst_adapter:source0_startofpacket -> alt_vip_vfr_0_avalon_slave_agent:cp_startofpacket
	wire          alt_vip_vfr_0_avalon_slave_burst_adapter_source0_endofpacket;                // alt_vip_vfr_0_avalon_slave_burst_adapter:source0_endofpacket -> alt_vip_vfr_0_avalon_slave_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                       // cmd_mux_002:src_valid -> reg32_avalon_interface_0_avalon_slave_0_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_002_src_data;                                                        // cmd_mux_002:src_data -> reg32_avalon_interface_0_avalon_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                       // reg32_avalon_interface_0_avalon_slave_0_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [7:0] cmd_mux_002_src_channel;                                                     // cmd_mux_002:src_channel -> reg32_avalon_interface_0_avalon_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                               // cmd_mux_002:src_startofpacket -> reg32_avalon_interface_0_avalon_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                 // cmd_mux_002:src_endofpacket -> reg32_avalon_interface_0_avalon_slave_0_burst_adapter:sink0_endofpacket
	wire          reg32_avalon_interface_0_avalon_slave_0_burst_adapter_source0_valid;         // reg32_avalon_interface_0_avalon_slave_0_burst_adapter:source0_valid -> reg32_avalon_interface_0_avalon_slave_0_agent:cp_valid
	wire  [115:0] reg32_avalon_interface_0_avalon_slave_0_burst_adapter_source0_data;          // reg32_avalon_interface_0_avalon_slave_0_burst_adapter:source0_data -> reg32_avalon_interface_0_avalon_slave_0_agent:cp_data
	wire          reg32_avalon_interface_0_avalon_slave_0_burst_adapter_source0_ready;         // reg32_avalon_interface_0_avalon_slave_0_agent:cp_ready -> reg32_avalon_interface_0_avalon_slave_0_burst_adapter:source0_ready
	wire    [7:0] reg32_avalon_interface_0_avalon_slave_0_burst_adapter_source0_channel;       // reg32_avalon_interface_0_avalon_slave_0_burst_adapter:source0_channel -> reg32_avalon_interface_0_avalon_slave_0_agent:cp_channel
	wire          reg32_avalon_interface_0_avalon_slave_0_burst_adapter_source0_startofpacket; // reg32_avalon_interface_0_avalon_slave_0_burst_adapter:source0_startofpacket -> reg32_avalon_interface_0_avalon_slave_0_agent:cp_startofpacket
	wire          reg32_avalon_interface_0_avalon_slave_0_burst_adapter_source0_endofpacket;   // reg32_avalon_interface_0_avalon_slave_0_burst_adapter:source0_endofpacket -> reg32_avalon_interface_0_avalon_slave_0_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                       // cmd_mux_003:src_valid -> sysid_qsys_0_control_slave_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_003_src_data;                                                        // cmd_mux_003:src_data -> sysid_qsys_0_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                       // sysid_qsys_0_control_slave_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire    [7:0] cmd_mux_003_src_channel;                                                     // cmd_mux_003:src_channel -> sysid_qsys_0_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                               // cmd_mux_003:src_startofpacket -> sysid_qsys_0_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                 // cmd_mux_003:src_endofpacket -> sysid_qsys_0_control_slave_burst_adapter:sink0_endofpacket
	wire          sysid_qsys_0_control_slave_burst_adapter_source0_valid;                      // sysid_qsys_0_control_slave_burst_adapter:source0_valid -> sysid_qsys_0_control_slave_agent:cp_valid
	wire  [115:0] sysid_qsys_0_control_slave_burst_adapter_source0_data;                       // sysid_qsys_0_control_slave_burst_adapter:source0_data -> sysid_qsys_0_control_slave_agent:cp_data
	wire          sysid_qsys_0_control_slave_burst_adapter_source0_ready;                      // sysid_qsys_0_control_slave_agent:cp_ready -> sysid_qsys_0_control_slave_burst_adapter:source0_ready
	wire    [7:0] sysid_qsys_0_control_slave_burst_adapter_source0_channel;                    // sysid_qsys_0_control_slave_burst_adapter:source0_channel -> sysid_qsys_0_control_slave_agent:cp_channel
	wire          sysid_qsys_0_control_slave_burst_adapter_source0_startofpacket;              // sysid_qsys_0_control_slave_burst_adapter:source0_startofpacket -> sysid_qsys_0_control_slave_agent:cp_startofpacket
	wire          sysid_qsys_0_control_slave_burst_adapter_source0_endofpacket;                // sysid_qsys_0_control_slave_burst_adapter:source0_endofpacket -> sysid_qsys_0_control_slave_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                       // cmd_mux_004:src_valid -> fifo_hps_to_fpga_in_csr_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_004_src_data;                                                        // cmd_mux_004:src_data -> fifo_hps_to_fpga_in_csr_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                       // fifo_hps_to_fpga_in_csr_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire    [7:0] cmd_mux_004_src_channel;                                                     // cmd_mux_004:src_channel -> fifo_hps_to_fpga_in_csr_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                               // cmd_mux_004:src_startofpacket -> fifo_hps_to_fpga_in_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                 // cmd_mux_004:src_endofpacket -> fifo_hps_to_fpga_in_csr_burst_adapter:sink0_endofpacket
	wire          fifo_hps_to_fpga_in_csr_burst_adapter_source0_valid;                         // fifo_hps_to_fpga_in_csr_burst_adapter:source0_valid -> fifo_hps_to_fpga_in_csr_agent:cp_valid
	wire  [115:0] fifo_hps_to_fpga_in_csr_burst_adapter_source0_data;                          // fifo_hps_to_fpga_in_csr_burst_adapter:source0_data -> fifo_hps_to_fpga_in_csr_agent:cp_data
	wire          fifo_hps_to_fpga_in_csr_burst_adapter_source0_ready;                         // fifo_hps_to_fpga_in_csr_agent:cp_ready -> fifo_hps_to_fpga_in_csr_burst_adapter:source0_ready
	wire    [7:0] fifo_hps_to_fpga_in_csr_burst_adapter_source0_channel;                       // fifo_hps_to_fpga_in_csr_burst_adapter:source0_channel -> fifo_hps_to_fpga_in_csr_agent:cp_channel
	wire          fifo_hps_to_fpga_in_csr_burst_adapter_source0_startofpacket;                 // fifo_hps_to_fpga_in_csr_burst_adapter:source0_startofpacket -> fifo_hps_to_fpga_in_csr_agent:cp_startofpacket
	wire          fifo_hps_to_fpga_in_csr_burst_adapter_source0_endofpacket;                   // fifo_hps_to_fpga_in_csr_burst_adapter:source0_endofpacket -> fifo_hps_to_fpga_in_csr_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                       // cmd_mux_005:src_valid -> fifo_fpga_to_hps_out_csr_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_005_src_data;                                                        // cmd_mux_005:src_data -> fifo_fpga_to_hps_out_csr_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                       // fifo_fpga_to_hps_out_csr_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire    [7:0] cmd_mux_005_src_channel;                                                     // cmd_mux_005:src_channel -> fifo_fpga_to_hps_out_csr_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                               // cmd_mux_005:src_startofpacket -> fifo_fpga_to_hps_out_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                 // cmd_mux_005:src_endofpacket -> fifo_fpga_to_hps_out_csr_burst_adapter:sink0_endofpacket
	wire          fifo_fpga_to_hps_out_csr_burst_adapter_source0_valid;                        // fifo_fpga_to_hps_out_csr_burst_adapter:source0_valid -> fifo_fpga_to_hps_out_csr_agent:cp_valid
	wire  [115:0] fifo_fpga_to_hps_out_csr_burst_adapter_source0_data;                         // fifo_fpga_to_hps_out_csr_burst_adapter:source0_data -> fifo_fpga_to_hps_out_csr_agent:cp_data
	wire          fifo_fpga_to_hps_out_csr_burst_adapter_source0_ready;                        // fifo_fpga_to_hps_out_csr_agent:cp_ready -> fifo_fpga_to_hps_out_csr_burst_adapter:source0_ready
	wire    [7:0] fifo_fpga_to_hps_out_csr_burst_adapter_source0_channel;                      // fifo_fpga_to_hps_out_csr_burst_adapter:source0_channel -> fifo_fpga_to_hps_out_csr_agent:cp_channel
	wire          fifo_fpga_to_hps_out_csr_burst_adapter_source0_startofpacket;                // fifo_fpga_to_hps_out_csr_burst_adapter:source0_startofpacket -> fifo_fpga_to_hps_out_csr_agent:cp_startofpacket
	wire          fifo_fpga_to_hps_out_csr_burst_adapter_source0_endofpacket;                  // fifo_fpga_to_hps_out_csr_burst_adapter:source0_endofpacket -> fifo_fpga_to_hps_out_csr_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                       // cmd_mux_006:src_valid -> hex5_hex0_s1_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_006_src_data;                                                        // cmd_mux_006:src_data -> hex5_hex0_s1_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                                       // hex5_hex0_s1_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire    [7:0] cmd_mux_006_src_channel;                                                     // cmd_mux_006:src_channel -> hex5_hex0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                               // cmd_mux_006:src_startofpacket -> hex5_hex0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                 // cmd_mux_006:src_endofpacket -> hex5_hex0_s1_burst_adapter:sink0_endofpacket
	wire          hex5_hex0_s1_burst_adapter_source0_valid;                                    // hex5_hex0_s1_burst_adapter:source0_valid -> hex5_hex0_s1_agent:cp_valid
	wire  [115:0] hex5_hex0_s1_burst_adapter_source0_data;                                     // hex5_hex0_s1_burst_adapter:source0_data -> hex5_hex0_s1_agent:cp_data
	wire          hex5_hex0_s1_burst_adapter_source0_ready;                                    // hex5_hex0_s1_agent:cp_ready -> hex5_hex0_s1_burst_adapter:source0_ready
	wire    [7:0] hex5_hex0_s1_burst_adapter_source0_channel;                                  // hex5_hex0_s1_burst_adapter:source0_channel -> hex5_hex0_s1_agent:cp_channel
	wire          hex5_hex0_s1_burst_adapter_source0_startofpacket;                            // hex5_hex0_s1_burst_adapter:source0_startofpacket -> hex5_hex0_s1_agent:cp_startofpacket
	wire          hex5_hex0_s1_burst_adapter_source0_endofpacket;                              // hex5_hex0_s1_burst_adapter:source0_endofpacket -> hex5_hex0_s1_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                       // cmd_mux_007:src_valid -> pushbuttons_s1_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_007_src_data;                                                        // cmd_mux_007:src_data -> pushbuttons_s1_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                                       // pushbuttons_s1_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire    [7:0] cmd_mux_007_src_channel;                                                     // cmd_mux_007:src_channel -> pushbuttons_s1_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                               // cmd_mux_007:src_startofpacket -> pushbuttons_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                 // cmd_mux_007:src_endofpacket -> pushbuttons_s1_burst_adapter:sink0_endofpacket
	wire          pushbuttons_s1_burst_adapter_source0_valid;                                  // pushbuttons_s1_burst_adapter:source0_valid -> pushbuttons_s1_agent:cp_valid
	wire  [115:0] pushbuttons_s1_burst_adapter_source0_data;                                   // pushbuttons_s1_burst_adapter:source0_data -> pushbuttons_s1_agent:cp_data
	wire          pushbuttons_s1_burst_adapter_source0_ready;                                  // pushbuttons_s1_agent:cp_ready -> pushbuttons_s1_burst_adapter:source0_ready
	wire    [7:0] pushbuttons_s1_burst_adapter_source0_channel;                                // pushbuttons_s1_burst_adapter:source0_channel -> pushbuttons_s1_agent:cp_channel
	wire          pushbuttons_s1_burst_adapter_source0_startofpacket;                          // pushbuttons_s1_burst_adapter:source0_startofpacket -> pushbuttons_s1_agent:cp_startofpacket
	wire          pushbuttons_s1_burst_adapter_source0_endofpacket;                            // pushbuttons_s1_burst_adapter:source0_endofpacket -> pushbuttons_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                        // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [115:0] cmd_demux_src0_data;                                                         // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                        // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [7:0] cmd_demux_src0_channel;                                                      // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                  // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                        // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [115:0] cmd_demux_src2_data;                                                         // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                        // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [7:0] cmd_demux_src2_channel;                                                      // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                  // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                        // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [115:0] cmd_demux_src3_data;                                                         // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                        // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [7:0] cmd_demux_src3_channel;                                                      // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                  // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                        // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [115:0] cmd_demux_src4_data;                                                         // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                        // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire    [7:0] cmd_demux_src4_channel;                                                      // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                  // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                        // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [115:0] cmd_demux_src5_data;                                                         // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                        // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire    [7:0] cmd_demux_src5_channel;                                                      // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                  // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                        // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [115:0] cmd_demux_src6_data;                                                         // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                        // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire    [7:0] cmd_demux_src6_channel;                                                      // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                  // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                        // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [115:0] cmd_demux_src7_data;                                                         // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                        // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire    [7:0] cmd_demux_src7_channel;                                                      // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                  // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                    // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [115:0] cmd_demux_001_src0_data;                                                     // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                    // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [7:0] cmd_demux_001_src0_channel;                                                  // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                            // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                              // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                    // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [115:0] cmd_demux_001_src2_data;                                                     // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                                    // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire    [7:0] cmd_demux_001_src2_channel;                                                  // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                            // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                              // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                    // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [115:0] cmd_demux_001_src3_data;                                                     // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                                    // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire    [7:0] cmd_demux_001_src3_channel;                                                  // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                            // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                              // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                                    // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire  [115:0] cmd_demux_001_src4_data;                                                     // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src4_ready;                                                    // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire    [7:0] cmd_demux_001_src4_channel;                                                  // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                            // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                              // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                                    // cmd_demux_001:src5_valid -> cmd_mux_005:sink1_valid
	wire  [115:0] cmd_demux_001_src5_data;                                                     // cmd_demux_001:src5_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src5_ready;                                                    // cmd_mux_005:sink1_ready -> cmd_demux_001:src5_ready
	wire    [7:0] cmd_demux_001_src5_channel;                                                  // cmd_demux_001:src5_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                                            // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                              // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                                    // cmd_demux_001:src6_valid -> cmd_mux_006:sink1_valid
	wire  [115:0] cmd_demux_001_src6_data;                                                     // cmd_demux_001:src6_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src6_ready;                                                    // cmd_mux_006:sink1_ready -> cmd_demux_001:src6_ready
	wire    [7:0] cmd_demux_001_src6_channel;                                                  // cmd_demux_001:src6_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src6_startofpacket;                                            // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                              // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                                    // cmd_demux_001:src7_valid -> cmd_mux_007:sink1_valid
	wire  [115:0] cmd_demux_001_src7_data;                                                     // cmd_demux_001:src7_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src7_ready;                                                    // cmd_mux_007:sink1_ready -> cmd_demux_001:src7_ready
	wire    [7:0] cmd_demux_001_src7_channel;                                                  // cmd_demux_001:src7_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src7_startofpacket;                                            // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                              // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                        // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [115:0] rsp_demux_src0_data;                                                         // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                        // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [7:0] rsp_demux_src0_channel;                                                      // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                  // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                        // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [115:0] rsp_demux_src1_data;                                                         // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                        // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [7:0] rsp_demux_src1_channel;                                                      // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                  // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                    // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [115:0] rsp_demux_002_src0_data;                                                     // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                    // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [7:0] rsp_demux_002_src0_channel;                                                  // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                            // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                              // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                    // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [115:0] rsp_demux_002_src1_data;                                                     // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                                    // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire    [7:0] rsp_demux_002_src1_channel;                                                  // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                            // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                              // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                    // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [115:0] rsp_demux_003_src0_data;                                                     // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                    // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [7:0] rsp_demux_003_src0_channel;                                                  // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                            // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                              // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                    // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [115:0] rsp_demux_003_src1_data;                                                     // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                                    // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire    [7:0] rsp_demux_003_src1_channel;                                                  // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                            // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                              // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                    // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [115:0] rsp_demux_004_src0_data;                                                     // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                    // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire    [7:0] rsp_demux_004_src0_channel;                                                  // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                            // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                              // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                    // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire  [115:0] rsp_demux_004_src1_data;                                                     // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src1_ready;                                                    // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire    [7:0] rsp_demux_004_src1_channel;                                                  // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                                            // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                              // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                    // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [115:0] rsp_demux_005_src0_data;                                                     // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                    // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire    [7:0] rsp_demux_005_src0_channel;                                                  // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                            // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                              // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                    // rsp_demux_005:src1_valid -> rsp_mux_001:sink5_valid
	wire  [115:0] rsp_demux_005_src1_data;                                                     // rsp_demux_005:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src1_ready;                                                    // rsp_mux_001:sink5_ready -> rsp_demux_005:src1_ready
	wire    [7:0] rsp_demux_005_src1_channel;                                                  // rsp_demux_005:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src1_startofpacket;                                            // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                              // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                    // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [115:0] rsp_demux_006_src0_data;                                                     // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                    // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire    [7:0] rsp_demux_006_src0_channel;                                                  // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                            // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                              // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                    // rsp_demux_006:src1_valid -> rsp_mux_001:sink6_valid
	wire  [115:0] rsp_demux_006_src1_data;                                                     // rsp_demux_006:src1_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src1_ready;                                                    // rsp_mux_001:sink6_ready -> rsp_demux_006:src1_ready
	wire    [7:0] rsp_demux_006_src1_channel;                                                  // rsp_demux_006:src1_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src1_startofpacket;                                            // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                              // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                    // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [115:0] rsp_demux_007_src0_data;                                                     // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                    // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire    [7:0] rsp_demux_007_src0_channel;                                                  // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                            // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                              // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                    // rsp_demux_007:src1_valid -> rsp_mux_001:sink7_valid
	wire  [115:0] rsp_demux_007_src1_data;                                                     // rsp_demux_007:src1_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_007_src1_ready;                                                    // rsp_mux_001:sink7_ready -> rsp_demux_007:src1_ready
	wire    [7:0] rsp_demux_007_src1_channel;                                                  // rsp_demux_007:src1_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src1_startofpacket;                                            // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                              // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          cmd_demux_src1_valid;                                                        // cmd_demux:src1_valid -> crosser:in_valid
	wire  [115:0] cmd_demux_src1_data;                                                         // cmd_demux:src1_data -> crosser:in_data
	wire          cmd_demux_src1_ready;                                                        // crosser:in_ready -> cmd_demux:src1_ready
	wire    [7:0] cmd_demux_src1_channel;                                                      // cmd_demux:src1_channel -> crosser:in_channel
	wire          cmd_demux_src1_startofpacket;                                                // cmd_demux:src1_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                  // cmd_demux:src1_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                           // crosser:out_valid -> cmd_mux_001:sink0_valid
	wire  [115:0] crosser_out_data;                                                            // crosser:out_data -> cmd_mux_001:sink0_data
	wire          crosser_out_ready;                                                           // cmd_mux_001:sink0_ready -> crosser:out_ready
	wire    [7:0] crosser_out_channel;                                                         // crosser:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_out_startofpacket;                                                   // crosser:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                     // crosser:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                                    // cmd_demux_001:src1_valid -> crosser_001:in_valid
	wire  [115:0] cmd_demux_001_src1_data;                                                     // cmd_demux_001:src1_data -> crosser_001:in_data
	wire          cmd_demux_001_src1_ready;                                                    // crosser_001:in_ready -> cmd_demux_001:src1_ready
	wire    [7:0] cmd_demux_001_src1_channel;                                                  // cmd_demux_001:src1_channel -> crosser_001:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                            // cmd_demux_001:src1_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                              // cmd_demux_001:src1_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                       // crosser_001:out_valid -> cmd_mux_001:sink1_valid
	wire  [115:0] crosser_001_out_data;                                                        // crosser_001:out_data -> cmd_mux_001:sink1_data
	wire          crosser_001_out_ready;                                                       // cmd_mux_001:sink1_ready -> crosser_001:out_ready
	wire    [7:0] crosser_001_out_channel;                                                     // crosser_001:out_channel -> cmd_mux_001:sink1_channel
	wire          crosser_001_out_startofpacket;                                               // crosser_001:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          crosser_001_out_endofpacket;                                                 // crosser_001:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          rsp_demux_001_src0_valid;                                                    // rsp_demux_001:src0_valid -> crosser_002:in_valid
	wire  [115:0] rsp_demux_001_src0_data;                                                     // rsp_demux_001:src0_data -> crosser_002:in_data
	wire          rsp_demux_001_src0_ready;                                                    // crosser_002:in_ready -> rsp_demux_001:src0_ready
	wire    [7:0] rsp_demux_001_src0_channel;                                                  // rsp_demux_001:src0_channel -> crosser_002:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                            // rsp_demux_001:src0_startofpacket -> crosser_002:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                              // rsp_demux_001:src0_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                       // crosser_002:out_valid -> rsp_mux:sink1_valid
	wire  [115:0] crosser_002_out_data;                                                        // crosser_002:out_data -> rsp_mux:sink1_data
	wire          crosser_002_out_ready;                                                       // rsp_mux:sink1_ready -> crosser_002:out_ready
	wire    [7:0] crosser_002_out_channel;                                                     // crosser_002:out_channel -> rsp_mux:sink1_channel
	wire          crosser_002_out_startofpacket;                                               // crosser_002:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          crosser_002_out_endofpacket;                                                 // crosser_002:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                    // rsp_demux_001:src1_valid -> crosser_003:in_valid
	wire  [115:0] rsp_demux_001_src1_data;                                                     // rsp_demux_001:src1_data -> crosser_003:in_data
	wire          rsp_demux_001_src1_ready;                                                    // crosser_003:in_ready -> rsp_demux_001:src1_ready
	wire    [7:0] rsp_demux_001_src1_channel;                                                  // rsp_demux_001:src1_channel -> crosser_003:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                            // rsp_demux_001:src1_startofpacket -> crosser_003:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                              // rsp_demux_001:src1_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                       // crosser_003:out_valid -> rsp_mux_001:sink1_valid
	wire  [115:0] crosser_003_out_data;                                                        // crosser_003:out_data -> rsp_mux_001:sink1_data
	wire          crosser_003_out_ready;                                                       // rsp_mux_001:sink1_ready -> crosser_003:out_ready
	wire    [7:0] crosser_003_out_channel;                                                     // crosser_003:out_channel -> rsp_mux_001:sink1_channel
	wire          crosser_003_out_startofpacket;                                               // crosser_003:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          crosser_003_out_endofpacket;                                                 // crosser_003:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire    [7:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                      // Arm_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [7:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                      // Arm_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          system_console_avalon_jtag_slave_agent_rdata_fifo_out_valid;                 // system_console_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] system_console_avalon_jtag_slave_agent_rdata_fifo_out_data;                  // system_console_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          system_console_avalon_jtag_slave_agent_rdata_fifo_out_ready;                 // avalon_st_adapter:in_0_ready -> system_console_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                               // avalon_st_adapter:out_0_valid -> system_console_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                // avalon_st_adapter:out_0_data -> system_console_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                               // system_console_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                               // avalon_st_adapter:out_0_error -> system_console_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_out_valid;                       // alt_vip_vfr_0_avalon_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_out_data;                        // alt_vip_vfr_0_avalon_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_001:in_0_ready -> alt_vip_vfr_0_avalon_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                           // avalon_st_adapter_001:out_0_valid -> alt_vip_vfr_0_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                            // avalon_st_adapter_001:out_0_data -> alt_vip_vfr_0_avalon_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                           // alt_vip_vfr_0_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                           // avalon_st_adapter_001:out_0_error -> alt_vip_vfr_0_avalon_slave_agent:rdata_fifo_sink_error
	wire          reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo_out_valid;          // reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo_out_data;           // reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo_out_ready;          // avalon_st_adapter_002:in_0_ready -> reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                           // avalon_st_adapter_002:out_0_valid -> reg32_avalon_interface_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                            // avalon_st_adapter_002:out_0_data -> reg32_avalon_interface_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                           // reg32_avalon_interface_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                           // avalon_st_adapter_002:out_0_error -> reg32_avalon_interface_0_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_out_valid;                       // sysid_qsys_0_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] sysid_qsys_0_control_slave_agent_rdata_fifo_out_data;                        // sysid_qsys_0_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_003:in_0_ready -> sysid_qsys_0_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                           // avalon_st_adapter_003:out_0_valid -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                            // avalon_st_adapter_003:out_0_data -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                           // sysid_qsys_0_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                           // avalon_st_adapter_003:out_0_error -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_error
	wire          fifo_hps_to_fpga_in_csr_agent_rdata_fifo_out_valid;                          // fifo_hps_to_fpga_in_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] fifo_hps_to_fpga_in_csr_agent_rdata_fifo_out_data;                           // fifo_hps_to_fpga_in_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          fifo_hps_to_fpga_in_csr_agent_rdata_fifo_out_ready;                          // avalon_st_adapter_004:in_0_ready -> fifo_hps_to_fpga_in_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                           // avalon_st_adapter_004:out_0_valid -> fifo_hps_to_fpga_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                            // avalon_st_adapter_004:out_0_data -> fifo_hps_to_fpga_in_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                           // fifo_hps_to_fpga_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                           // avalon_st_adapter_004:out_0_error -> fifo_hps_to_fpga_in_csr_agent:rdata_fifo_sink_error
	wire          fifo_fpga_to_hps_out_csr_agent_rdata_fifo_out_valid;                         // fifo_fpga_to_hps_out_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] fifo_fpga_to_hps_out_csr_agent_rdata_fifo_out_data;                          // fifo_fpga_to_hps_out_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          fifo_fpga_to_hps_out_csr_agent_rdata_fifo_out_ready;                         // avalon_st_adapter_005:in_0_ready -> fifo_fpga_to_hps_out_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                           // avalon_st_adapter_005:out_0_valid -> fifo_fpga_to_hps_out_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                            // avalon_st_adapter_005:out_0_data -> fifo_fpga_to_hps_out_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                           // fifo_fpga_to_hps_out_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                           // avalon_st_adapter_005:out_0_error -> fifo_fpga_to_hps_out_csr_agent:rdata_fifo_sink_error
	wire          hex5_hex0_s1_agent_rdata_fifo_out_valid;                                     // hex5_hex0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] hex5_hex0_s1_agent_rdata_fifo_out_data;                                      // hex5_hex0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          hex5_hex0_s1_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_006:in_0_ready -> hex5_hex0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                           // avalon_st_adapter_006:out_0_valid -> hex5_hex0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                            // avalon_st_adapter_006:out_0_data -> hex5_hex0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                           // hex5_hex0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                           // avalon_st_adapter_006:out_0_error -> hex5_hex0_s1_agent:rdata_fifo_sink_error
	wire          pushbuttons_s1_agent_rdata_fifo_out_valid;                                   // pushbuttons_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] pushbuttons_s1_agent_rdata_fifo_out_data;                                    // pushbuttons_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          pushbuttons_s1_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter_007:in_0_ready -> pushbuttons_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                           // avalon_st_adapter_007:out_0_valid -> pushbuttons_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                            // avalon_st_adapter_007:out_0_data -> pushbuttons_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                           // pushbuttons_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                           // avalon_st_adapter_007:out_0_error -> pushbuttons_s1_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) system_console_avalon_jtag_slave_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                             //                      clk.clk
		.reset                  (system_console_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (system_console_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (system_console_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (system_console_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (system_console_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (system_console_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (system_console_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (system_console_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (system_console_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (system_console_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (system_console_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (system_console_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (system_console_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (system_console_avalon_jtag_slave_write),                  //                         .write
		.av_read                (system_console_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (system_console_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (system_console_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (system_console_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (system_console_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) alt_vip_vfr_0_avalon_slave_translator (
		.clk                    (pll_0_outclk0_clk),                                           //                      clk.clk
		.reset                  (alt_vip_vfr_0_clock_reset_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (alt_vip_vfr_0_avalon_slave_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (alt_vip_vfr_0_avalon_slave_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (alt_vip_vfr_0_avalon_slave_agent_m0_read),                    //                         .read
		.uav_write              (alt_vip_vfr_0_avalon_slave_agent_m0_write),                   //                         .write
		.uav_waitrequest        (alt_vip_vfr_0_avalon_slave_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (alt_vip_vfr_0_avalon_slave_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (alt_vip_vfr_0_avalon_slave_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (alt_vip_vfr_0_avalon_slave_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (alt_vip_vfr_0_avalon_slave_agent_m0_writedata),               //                         .writedata
		.uav_lock               (alt_vip_vfr_0_avalon_slave_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (alt_vip_vfr_0_avalon_slave_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (alt_vip_vfr_0_avalon_slave_address),                          //      avalon_anti_slave_0.address
		.av_write               (alt_vip_vfr_0_avalon_slave_write),                            //                         .write
		.av_read                (alt_vip_vfr_0_avalon_slave_read),                             //                         .read
		.av_readdata            (alt_vip_vfr_0_avalon_slave_readdata),                         //                         .readdata
		.av_writedata           (alt_vip_vfr_0_avalon_slave_writedata),                        //                         .writedata
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_burstcount          (),                                                            //              (terminated)
		.av_byteenable          (),                                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                                        //              (terminated)
		.av_waitrequest         (1'b0),                                                        //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_chipselect          (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) reg32_avalon_interface_0_avalon_slave_0_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                                    //                      clk.clk
		.reset                  (system_console_reset_reset_bridge_in_reset_reset),               //                    reset.reset
		.uav_address            (reg32_avalon_interface_0_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (reg32_avalon_interface_0_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (reg32_avalon_interface_0_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (reg32_avalon_interface_0_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (reg32_avalon_interface_0_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (reg32_avalon_interface_0_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (reg32_avalon_interface_0_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (reg32_avalon_interface_0_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (reg32_avalon_interface_0_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (reg32_avalon_interface_0_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (reg32_avalon_interface_0_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_write               (reg32_avalon_interface_0_avalon_slave_0_write),                  //      avalon_anti_slave_0.write
		.av_read                (reg32_avalon_interface_0_avalon_slave_0_read),                   //                         .read
		.av_readdata            (reg32_avalon_interface_0_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata           (reg32_avalon_interface_0_avalon_slave_0_writedata),              //                         .writedata
		.av_byteenable          (reg32_avalon_interface_0_avalon_slave_0_byteenable),             //                         .byteenable
		.av_chipselect          (reg32_avalon_interface_0_avalon_slave_0_chipselect),             //                         .chipselect
		.av_address             (),                                                               //              (terminated)
		.av_begintransfer       (),                                                               //              (terminated)
		.av_beginbursttransfer  (),                                                               //              (terminated)
		.av_burstcount          (),                                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                                           //              (terminated)
		.av_waitrequest         (1'b0),                                                           //              (terminated)
		.av_writebyteenable     (),                                                               //              (terminated)
		.av_lock                (),                                                               //              (terminated)
		.av_clken               (),                                                               //              (terminated)
		.uav_clken              (1'b0),                                                           //              (terminated)
		.av_debugaccess         (),                                                               //              (terminated)
		.av_outputenable        (),                                                               //              (terminated)
		.uav_response           (),                                                               //              (terminated)
		.av_response            (2'b00),                                                          //              (terminated)
		.uav_writeresponsevalid (),                                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_0_control_slave_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                       //                      clk.clk
		.reset                  (sysid_qsys_0_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (sysid_qsys_0_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_0_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_qsys_0_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_qsys_0_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_qsys_0_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_0_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_0_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_qsys_0_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_qsys_0_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_qsys_0_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_qsys_0_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_qsys_0_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_0_control_slave_readdata),               //                         .readdata
		.av_write               (),                                                  //              (terminated)
		.av_read                (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_hps_to_fpga_in_csr_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                      //                      clk.clk
		.reset                  (system_console_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_hps_to_fpga_in_csr_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_hps_to_fpga_in_csr_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (fifo_hps_to_fpga_in_csr_agent_m0_read),            //                         .read
		.uav_write              (fifo_hps_to_fpga_in_csr_agent_m0_write),           //                         .write
		.uav_waitrequest        (fifo_hps_to_fpga_in_csr_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (fifo_hps_to_fpga_in_csr_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (fifo_hps_to_fpga_in_csr_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (fifo_hps_to_fpga_in_csr_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (fifo_hps_to_fpga_in_csr_agent_m0_writedata),       //                         .writedata
		.uav_lock               (fifo_hps_to_fpga_in_csr_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (fifo_hps_to_fpga_in_csr_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (fifo_hps_to_fpga_in_csr_address),                  //      avalon_anti_slave_0.address
		.av_write               (fifo_hps_to_fpga_in_csr_write),                    //                         .write
		.av_read                (fifo_hps_to_fpga_in_csr_read),                     //                         .read
		.av_readdata            (fifo_hps_to_fpga_in_csr_readdata),                 //                         .readdata
		.av_writedata           (fifo_hps_to_fpga_in_csr_writedata),                //                         .writedata
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_fpga_to_hps_out_csr_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                      //                      clk.clk
		.reset                  (system_console_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_fpga_to_hps_out_csr_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_fpga_to_hps_out_csr_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (fifo_fpga_to_hps_out_csr_agent_m0_read),           //                         .read
		.uav_write              (fifo_fpga_to_hps_out_csr_agent_m0_write),          //                         .write
		.uav_waitrequest        (fifo_fpga_to_hps_out_csr_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (fifo_fpga_to_hps_out_csr_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (fifo_fpga_to_hps_out_csr_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (fifo_fpga_to_hps_out_csr_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (fifo_fpga_to_hps_out_csr_agent_m0_writedata),      //                         .writedata
		.uav_lock               (fifo_fpga_to_hps_out_csr_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (fifo_fpga_to_hps_out_csr_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (fifo_fpga_to_hps_out_csr_address),                 //      avalon_anti_slave_0.address
		.av_write               (fifo_fpga_to_hps_out_csr_write),                   //                         .write
		.av_read                (fifo_fpga_to_hps_out_csr_read),                    //                         .read
		.av_readdata            (fifo_fpga_to_hps_out_csr_readdata),                //                         .readdata
		.av_writedata           (fifo_fpga_to_hps_out_csr_writedata),               //                         .writedata
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex5_hex0_s1_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                      //                      clk.clk
		.reset                  (system_console_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex5_hex0_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (hex5_hex0_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (hex5_hex0_s1_agent_m0_read),                       //                         .read
		.uav_write              (hex5_hex0_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (hex5_hex0_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (hex5_hex0_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (hex5_hex0_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (hex5_hex0_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (hex5_hex0_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (hex5_hex0_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (hex5_hex0_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (hex5_hex0_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (hex5_hex0_s1_write),                               //                         .write
		.av_readdata            (hex5_hex0_s1_readdata),                            //                         .readdata
		.av_writedata           (hex5_hex0_s1_writedata),                           //                         .writedata
		.av_chipselect          (hex5_hex0_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pushbuttons_s1_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                      //                      clk.clk
		.reset                  (system_console_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pushbuttons_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (pushbuttons_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (pushbuttons_s1_agent_m0_read),                     //                         .read
		.uav_write              (pushbuttons_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (pushbuttons_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (pushbuttons_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (pushbuttons_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (pushbuttons_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (pushbuttons_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (pushbuttons_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (pushbuttons_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (pushbuttons_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (pushbuttons_s1_write),                             //                         .write
		.av_readdata            (pushbuttons_s1_readdata),                          //                         .readdata
		.av_writedata           (pushbuttons_s1_writedata),                         //                         .writedata
		.av_chipselect          (pushbuttons_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (84),
		.PKT_CACHE_H               (110),
		.PKT_CACHE_L               (107),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_THREAD_ID_H           (103),
		.PKT_THREAD_ID_L           (92),
		.PKT_QOS_L                 (85),
		.PKT_QOS_H                 (85),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (8),
		.ID                        (0)
	) arm_a9_hps_h2f_lw_axi_master_agent (
		.aclk                   (sys_sdram_pll_0_sys_clk_clk),                                               //              clk.clk
		.aresetn                (~Arm_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (Arm_A9_HPS_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (Arm_A9_HPS_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (Arm_A9_HPS_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (Arm_A9_HPS_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (Arm_A9_HPS_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (Arm_A9_HPS_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (Arm_A9_HPS_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (Arm_A9_HPS_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (Arm_A9_HPS_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (Arm_A9_HPS_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (Arm_A9_HPS_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (Arm_A9_HPS_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (Arm_A9_HPS_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (Arm_A9_HPS_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (Arm_A9_HPS_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (Arm_A9_HPS_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (Arm_A9_HPS_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (Arm_A9_HPS_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (Arm_A9_HPS_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (Arm_A9_HPS_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (Arm_A9_HPS_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (Arm_A9_HPS_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (Arm_A9_HPS_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (Arm_A9_HPS_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (Arm_A9_HPS_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (Arm_A9_HPS_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (Arm_A9_HPS_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (Arm_A9_HPS_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (Arm_A9_HPS_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (Arm_A9_HPS_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (Arm_A9_HPS_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (Arm_A9_HPS_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (Arm_A9_HPS_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (Arm_A9_HPS_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (Arm_A9_HPS_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (Arm_A9_HPS_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                      //      (terminated)
		.aruser                 (1'b0),                                                                      //      (terminated)
		.awqos                  (4'b0000),                                                                   //      (terminated)
		.arqos                  (4'b0000),                                                                   //      (terminated)
		.awregion               (4'b0000),                                                                   //      (terminated)
		.arregion               (4'b0000),                                                                   //      (terminated)
		.wuser                  (1'b0),                                                                      //      (terminated)
		.ruser                  (),                                                                          //      (terminated)
		.buser                  ()                                                                           //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) system_console_avalon_jtag_slave_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                          //             clk.clk
		.reset                   (system_console_reset_reset_bridge_in_reset_reset),                     //       clk_reset.reset
		.m0_address              (system_console_avalon_jtag_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (system_console_avalon_jtag_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (system_console_avalon_jtag_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (system_console_avalon_jtag_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (system_console_avalon_jtag_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (system_console_avalon_jtag_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (system_console_avalon_jtag_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (system_console_avalon_jtag_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (system_console_avalon_jtag_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (system_console_avalon_jtag_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (system_console_avalon_jtag_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (system_console_avalon_jtag_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (system_console_avalon_jtag_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (system_console_avalon_jtag_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (system_console_avalon_jtag_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (system_console_avalon_jtag_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (system_console_avalon_jtag_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (system_console_avalon_jtag_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (system_console_avalon_jtag_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (system_console_avalon_jtag_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (system_console_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (system_console_avalon_jtag_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (system_console_avalon_jtag_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (system_console_avalon_jtag_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (system_console_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (system_console_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (system_console_avalon_jtag_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (system_console_avalon_jtag_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (system_console_avalon_jtag_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (system_console_avalon_jtag_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (system_console_avalon_jtag_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (system_console_avalon_jtag_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (system_console_avalon_jtag_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (system_console_avalon_jtag_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (system_console_avalon_jtag_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) system_console_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                       //       clk.clk
		.reset             (system_console_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (system_console_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (system_console_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (system_console_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (system_console_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (system_console_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (system_console_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (system_console_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (system_console_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (system_console_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (system_console_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) system_console_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                 //       clk.clk
		.reset             (system_console_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (system_console_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (system_console_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (system_console_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (system_console_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (system_console_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (system_console_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) alt_vip_vfr_0_avalon_slave_agent (
		.clk                     (pll_0_outclk0_clk),                                              //             clk.clk
		.reset                   (alt_vip_vfr_0_clock_reset_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (alt_vip_vfr_0_avalon_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (alt_vip_vfr_0_avalon_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (alt_vip_vfr_0_avalon_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (alt_vip_vfr_0_avalon_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (alt_vip_vfr_0_avalon_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (alt_vip_vfr_0_avalon_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (alt_vip_vfr_0_avalon_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (alt_vip_vfr_0_avalon_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (alt_vip_vfr_0_avalon_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (alt_vip_vfr_0_avalon_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (alt_vip_vfr_0_avalon_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (alt_vip_vfr_0_avalon_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (alt_vip_vfr_0_avalon_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (alt_vip_vfr_0_avalon_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (alt_vip_vfr_0_avalon_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (alt_vip_vfr_0_avalon_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (alt_vip_vfr_0_avalon_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (alt_vip_vfr_0_avalon_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (alt_vip_vfr_0_avalon_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (alt_vip_vfr_0_avalon_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (alt_vip_vfr_0_avalon_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (alt_vip_vfr_0_avalon_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (alt_vip_vfr_0_avalon_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (alt_vip_vfr_0_avalon_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (alt_vip_vfr_0_avalon_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (alt_vip_vfr_0_avalon_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (alt_vip_vfr_0_avalon_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alt_vip_vfr_0_avalon_slave_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                           //       clk.clk
		.reset             (alt_vip_vfr_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (alt_vip_vfr_0_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (alt_vip_vfr_0_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (alt_vip_vfr_0_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (alt_vip_vfr_0_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (alt_vip_vfr_0_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alt_vip_vfr_0_avalon_slave_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                                           //       clk.clk
		.reset             (alt_vip_vfr_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) reg32_avalon_interface_0_avalon_slave_0_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                                 //             clk.clk
		.reset                   (system_console_reset_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (reg32_avalon_interface_0_avalon_slave_0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (reg32_avalon_interface_0_avalon_slave_0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (reg32_avalon_interface_0_avalon_slave_0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (reg32_avalon_interface_0_avalon_slave_0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (reg32_avalon_interface_0_avalon_slave_0_agent_m0_lock),                       //                .lock
		.m0_readdata             (reg32_avalon_interface_0_avalon_slave_0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (reg32_avalon_interface_0_avalon_slave_0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (reg32_avalon_interface_0_avalon_slave_0_agent_m0_read),                       //                .read
		.m0_waitrequest          (reg32_avalon_interface_0_avalon_slave_0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (reg32_avalon_interface_0_avalon_slave_0_agent_m0_writedata),                  //                .writedata
		.m0_write                (reg32_avalon_interface_0_avalon_slave_0_agent_m0_write),                      //                .write
		.rp_endofpacket          (reg32_avalon_interface_0_avalon_slave_0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (reg32_avalon_interface_0_avalon_slave_0_agent_rp_ready),                      //                .ready
		.rp_valid                (reg32_avalon_interface_0_avalon_slave_0_agent_rp_valid),                      //                .valid
		.rp_data                 (reg32_avalon_interface_0_avalon_slave_0_agent_rp_data),                       //                .data
		.rp_startofpacket        (reg32_avalon_interface_0_avalon_slave_0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (reg32_avalon_interface_0_avalon_slave_0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (reg32_avalon_interface_0_avalon_slave_0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (reg32_avalon_interface_0_avalon_slave_0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (reg32_avalon_interface_0_avalon_slave_0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (reg32_avalon_interface_0_avalon_slave_0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (reg32_avalon_interface_0_avalon_slave_0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (reg32_avalon_interface_0_avalon_slave_0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (reg32_avalon_interface_0_avalon_slave_0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (reg32_avalon_interface_0_avalon_slave_0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (reg32_avalon_interface_0_avalon_slave_0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (reg32_avalon_interface_0_avalon_slave_0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                           //                .error
		.rdata_fifo_src_ready    (reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                              //       clk.clk
		.reset             (system_console_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_data           (reg32_avalon_interface_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (reg32_avalon_interface_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (reg32_avalon_interface_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (reg32_avalon_interface_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (reg32_avalon_interface_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (reg32_avalon_interface_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                        //       clk.clk
		.reset             (system_console_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_startofpacket  (1'b0),                                                               // (terminated)
		.in_endofpacket    (1'b0),                                                               // (terminated)
		.out_startofpacket (),                                                                   // (terminated)
		.out_endofpacket   (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_0_control_slave_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                    //             clk.clk
		.reset                   (sysid_qsys_0_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (sysid_qsys_0_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sysid_qsys_0_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sysid_qsys_0_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sysid_qsys_0_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sysid_qsys_0_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (sysid_qsys_0_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sysid_qsys_0_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sysid_qsys_0_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (sysid_qsys_0_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sysid_qsys_0_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (sysid_qsys_0_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (sysid_qsys_0_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sysid_qsys_0_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (sysid_qsys_0_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (sysid_qsys_0_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (sysid_qsys_0_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sysid_qsys_0_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sysid_qsys_0_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sysid_qsys_0_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sysid_qsys_0_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sysid_qsys_0_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sysid_qsys_0_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sysid_qsys_0_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sysid_qsys_0_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sysid_qsys_0_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_0_control_slave_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                 //       clk.clk
		.reset             (sysid_qsys_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (sysid_qsys_0_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_0_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_0_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_0_control_slave_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                           //       clk.clk
		.reset             (sysid_qsys_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysid_qsys_0_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysid_qsys_0_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysid_qsys_0_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_hps_to_fpga_in_csr_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                 //             clk.clk
		.reset                   (system_console_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (fifo_hps_to_fpga_in_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (fifo_hps_to_fpga_in_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (fifo_hps_to_fpga_in_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (fifo_hps_to_fpga_in_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (fifo_hps_to_fpga_in_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (fifo_hps_to_fpga_in_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (fifo_hps_to_fpga_in_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (fifo_hps_to_fpga_in_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (fifo_hps_to_fpga_in_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (fifo_hps_to_fpga_in_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (fifo_hps_to_fpga_in_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (fifo_hps_to_fpga_in_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (fifo_hps_to_fpga_in_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (fifo_hps_to_fpga_in_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (fifo_hps_to_fpga_in_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (fifo_hps_to_fpga_in_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (fifo_hps_to_fpga_in_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (fifo_hps_to_fpga_in_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (fifo_hps_to_fpga_in_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (fifo_hps_to_fpga_in_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (fifo_hps_to_fpga_in_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (fifo_hps_to_fpga_in_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (fifo_hps_to_fpga_in_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (fifo_hps_to_fpga_in_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (fifo_hps_to_fpga_in_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (fifo_hps_to_fpga_in_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (fifo_hps_to_fpga_in_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (fifo_hps_to_fpga_in_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_hps_to_fpga_in_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (fifo_hps_to_fpga_in_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_hps_to_fpga_in_csr_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                              //       clk.clk
		.reset             (system_console_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (fifo_hps_to_fpga_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_hps_to_fpga_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_hps_to_fpga_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_hps_to_fpga_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_hps_to_fpga_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_hps_to_fpga_in_csr_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                        //       clk.clk
		.reset             (system_console_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (fifo_hps_to_fpga_in_csr_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (fifo_hps_to_fpga_in_csr_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (fifo_hps_to_fpga_in_csr_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (fifo_hps_to_fpga_in_csr_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (fifo_hps_to_fpga_in_csr_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (fifo_hps_to_fpga_in_csr_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_fpga_to_hps_out_csr_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                  //             clk.clk
		.reset                   (system_console_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (fifo_fpga_to_hps_out_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (fifo_fpga_to_hps_out_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (fifo_fpga_to_hps_out_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (fifo_fpga_to_hps_out_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (fifo_fpga_to_hps_out_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (fifo_fpga_to_hps_out_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (fifo_fpga_to_hps_out_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (fifo_fpga_to_hps_out_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (fifo_fpga_to_hps_out_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (fifo_fpga_to_hps_out_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (fifo_fpga_to_hps_out_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (fifo_fpga_to_hps_out_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (fifo_fpga_to_hps_out_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (fifo_fpga_to_hps_out_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (fifo_fpga_to_hps_out_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (fifo_fpga_to_hps_out_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (fifo_fpga_to_hps_out_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (fifo_fpga_to_hps_out_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (fifo_fpga_to_hps_out_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (fifo_fpga_to_hps_out_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (fifo_fpga_to_hps_out_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (fifo_fpga_to_hps_out_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (fifo_fpga_to_hps_out_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (fifo_fpga_to_hps_out_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (fifo_fpga_to_hps_out_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (fifo_fpga_to_hps_out_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (fifo_fpga_to_hps_out_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (fifo_fpga_to_hps_out_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_fpga_to_hps_out_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (fifo_fpga_to_hps_out_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_fpga_to_hps_out_csr_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                               //       clk.clk
		.reset             (system_console_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (fifo_fpga_to_hps_out_csr_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_fpga_to_hps_out_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_fpga_to_hps_out_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_fpga_to_hps_out_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_fpga_to_hps_out_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_fpga_to_hps_out_csr_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                         //       clk.clk
		.reset             (system_console_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (fifo_fpga_to_hps_out_csr_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (fifo_fpga_to_hps_out_csr_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (fifo_fpga_to_hps_out_csr_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (fifo_fpga_to_hps_out_csr_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (fifo_fpga_to_hps_out_csr_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (fifo_fpga_to_hps_out_csr_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex5_hex0_s1_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                      //             clk.clk
		.reset                   (system_console_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hex5_hex0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (hex5_hex0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (hex5_hex0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (hex5_hex0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (hex5_hex0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (hex5_hex0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (hex5_hex0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (hex5_hex0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (hex5_hex0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (hex5_hex0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (hex5_hex0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (hex5_hex0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (hex5_hex0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (hex5_hex0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (hex5_hex0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (hex5_hex0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (hex5_hex0_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (hex5_hex0_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (hex5_hex0_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (hex5_hex0_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (hex5_hex0_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (hex5_hex0_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (hex5_hex0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (hex5_hex0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (hex5_hex0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (hex5_hex0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (hex5_hex0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (hex5_hex0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (hex5_hex0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (hex5_hex0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (hex5_hex0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (hex5_hex0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                //                .error
		.rdata_fifo_src_ready    (hex5_hex0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex5_hex0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (hex5_hex0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex5_hex0_s1_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                      //       clk.clk
		.reset             (system_console_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hex5_hex0_s1_agent_rf_source_data),                //        in.data
		.in_valid          (hex5_hex0_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (hex5_hex0_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (hex5_hex0_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (hex5_hex0_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (hex5_hex0_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (hex5_hex0_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (hex5_hex0_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (hex5_hex0_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (hex5_hex0_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex5_hex0_s1_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                      //       clk.clk
		.reset             (system_console_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hex5_hex0_s1_agent_rdata_fifo_src_data),           //        in.data
		.in_valid          (hex5_hex0_s1_agent_rdata_fifo_src_valid),          //          .valid
		.in_ready          (hex5_hex0_s1_agent_rdata_fifo_src_ready),          //          .ready
		.out_data          (hex5_hex0_s1_agent_rdata_fifo_out_data),           //       out.data
		.out_valid         (hex5_hex0_s1_agent_rdata_fifo_out_valid),          //          .valid
		.out_ready         (hex5_hex0_s1_agent_rdata_fifo_out_ready),          //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pushbuttons_s1_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                        //             clk.clk
		.reset                   (system_console_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (pushbuttons_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pushbuttons_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pushbuttons_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pushbuttons_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pushbuttons_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pushbuttons_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pushbuttons_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pushbuttons_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pushbuttons_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pushbuttons_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pushbuttons_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pushbuttons_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pushbuttons_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pushbuttons_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pushbuttons_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pushbuttons_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pushbuttons_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pushbuttons_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pushbuttons_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pushbuttons_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pushbuttons_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pushbuttons_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pushbuttons_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pushbuttons_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pushbuttons_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pushbuttons_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pushbuttons_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pushbuttons_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pushbuttons_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pushbuttons_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pushbuttons_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pushbuttons_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (pushbuttons_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pushbuttons_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pushbuttons_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pushbuttons_s1_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                      //       clk.clk
		.reset             (system_console_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pushbuttons_s1_agent_rf_source_data),              //        in.data
		.in_valid          (pushbuttons_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (pushbuttons_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (pushbuttons_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (pushbuttons_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (pushbuttons_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (pushbuttons_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (pushbuttons_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (pushbuttons_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (pushbuttons_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pushbuttons_s1_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                      //       clk.clk
		.reset             (system_console_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pushbuttons_s1_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (pushbuttons_s1_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (pushbuttons_s1_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (pushbuttons_s1_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (pushbuttons_s1_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (pushbuttons_s1_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	sys_vga_mm_interconnect_2_router router (
		.sink_ready         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                              //       clk.clk
		.reset              (Arm_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                         //       src.ready
		.src_valid          (router_src_valid),                                                         //          .valid
		.src_data           (router_src_data),                                                          //          .data
		.src_channel        (router_src_channel),                                                       //          .channel
		.src_startofpacket  (router_src_startofpacket),                                                 //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                    //          .endofpacket
	);

	sys_vga_mm_interconnect_2_router router_001 (
		.sink_ready         (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                              //       clk.clk
		.reset              (Arm_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                     //       src.ready
		.src_valid          (router_001_src_valid),                                                     //          .valid
		.src_data           (router_001_src_data),                                                      //          .data
		.src_channel        (router_001_src_channel),                                                   //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                                //          .endofpacket
	);

	sys_vga_mm_interconnect_2_router_002 router_002 (
		.sink_ready         (system_console_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (system_console_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (system_console_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (system_console_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (system_console_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                             //       clk.clk
		.reset              (system_console_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_002_src_ready),                                    //       src.ready
		.src_valid          (router_002_src_valid),                                    //          .valid
		.src_data           (router_002_src_data),                                     //          .data
		.src_channel        (router_002_src_channel),                                  //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                               //          .endofpacket
	);

	sys_vga_mm_interconnect_2_router_002 router_003 (
		.sink_ready         (alt_vip_vfr_0_avalon_slave_agent_rp_ready),                   //      sink.ready
		.sink_valid         (alt_vip_vfr_0_avalon_slave_agent_rp_valid),                   //          .valid
		.sink_data          (alt_vip_vfr_0_avalon_slave_agent_rp_data),                    //          .data
		.sink_startofpacket (alt_vip_vfr_0_avalon_slave_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (alt_vip_vfr_0_avalon_slave_agent_rp_endofpacket),             //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                           //       clk.clk
		.reset              (alt_vip_vfr_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                        //       src.ready
		.src_valid          (router_003_src_valid),                                        //          .valid
		.src_data           (router_003_src_data),                                         //          .data
		.src_channel        (router_003_src_channel),                                      //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                   //          .endofpacket
	);

	sys_vga_mm_interconnect_2_router_002 router_004 (
		.sink_ready         (reg32_avalon_interface_0_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (reg32_avalon_interface_0_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (reg32_avalon_interface_0_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (reg32_avalon_interface_0_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (reg32_avalon_interface_0_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                    //       clk.clk
		.reset              (system_console_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_004_src_ready),                                           //       src.ready
		.src_valid          (router_004_src_valid),                                           //          .valid
		.src_data           (router_004_src_data),                                            //          .data
		.src_channel        (router_004_src_channel),                                         //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                      //          .endofpacket
	);

	sys_vga_mm_interconnect_2_router_002 router_005 (
		.sink_ready         (sysid_qsys_0_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_0_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_0_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_0_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_0_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                       //       clk.clk
		.reset              (sysid_qsys_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_005_src_ready),                              //       src.ready
		.src_valid          (router_005_src_valid),                              //          .valid
		.src_data           (router_005_src_data),                               //          .data
		.src_channel        (router_005_src_channel),                            //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                         //          .endofpacket
	);

	sys_vga_mm_interconnect_2_router_002 router_006 (
		.sink_ready         (fifo_hps_to_fpga_in_csr_agent_rp_ready),           //      sink.ready
		.sink_valid         (fifo_hps_to_fpga_in_csr_agent_rp_valid),           //          .valid
		.sink_data          (fifo_hps_to_fpga_in_csr_agent_rp_data),            //          .data
		.sink_startofpacket (fifo_hps_to_fpga_in_csr_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (fifo_hps_to_fpga_in_csr_agent_rp_endofpacket),     //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                      //       clk.clk
		.reset              (system_console_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                             //       src.ready
		.src_valid          (router_006_src_valid),                             //          .valid
		.src_data           (router_006_src_data),                              //          .data
		.src_channel        (router_006_src_channel),                           //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                        //          .endofpacket
	);

	sys_vga_mm_interconnect_2_router_002 router_007 (
		.sink_ready         (fifo_fpga_to_hps_out_csr_agent_rp_ready),          //      sink.ready
		.sink_valid         (fifo_fpga_to_hps_out_csr_agent_rp_valid),          //          .valid
		.sink_data          (fifo_fpga_to_hps_out_csr_agent_rp_data),           //          .data
		.sink_startofpacket (fifo_fpga_to_hps_out_csr_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (fifo_fpga_to_hps_out_csr_agent_rp_endofpacket),    //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                      //       clk.clk
		.reset              (system_console_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                             //       src.ready
		.src_valid          (router_007_src_valid),                             //          .valid
		.src_data           (router_007_src_data),                              //          .data
		.src_channel        (router_007_src_channel),                           //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                        //          .endofpacket
	);

	sys_vga_mm_interconnect_2_router_002 router_008 (
		.sink_ready         (hex5_hex0_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (hex5_hex0_s1_agent_rp_valid),                      //          .valid
		.sink_data          (hex5_hex0_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (hex5_hex0_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (hex5_hex0_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                      //       clk.clk
		.reset              (system_console_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                             //       src.ready
		.src_valid          (router_008_src_valid),                             //          .valid
		.src_data           (router_008_src_data),                              //          .data
		.src_channel        (router_008_src_channel),                           //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                        //          .endofpacket
	);

	sys_vga_mm_interconnect_2_router_002 router_009 (
		.sink_ready         (pushbuttons_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (pushbuttons_s1_agent_rp_valid),                    //          .valid
		.sink_data          (pushbuttons_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (pushbuttons_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (pushbuttons_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                      //       clk.clk
		.reset              (system_console_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                             //       src.ready
		.src_valid          (router_009_src_valid),                             //          .valid
		.src_data           (router_009_src_data),                              //          .data
		.src_channel        (router_009_src_channel),                           //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                        //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (8),
		.VALID_WIDTH               (8),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arm_a9_hps_h2f_lw_axi_master_wr_limiter (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                                              //       clk.clk
		.reset                  (Arm_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                         //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                         //          .valid
		.cmd_sink_data          (router_src_data),                                                          //          .data
		.cmd_sink_channel       (router_src_channel),                                                       //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                                 //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                                   //          .endofpacket
		.cmd_src_ready          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                        //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                        //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                      //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                         //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                                //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                                  //          .endofpacket
		.rsp_src_ready          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (8),
		.VALID_WIDTH               (8),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arm_a9_hps_h2f_lw_axi_master_rd_limiter (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                                              //       clk.clk
		.reset                  (Arm_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                                     //          .valid
		.cmd_sink_data          (router_001_src_data),                                                      //          .data
		.cmd_sink_channel       (router_001_src_channel),                                                   //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                             //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                               //          .endofpacket
		.cmd_src_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                                    //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                                    //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                                  //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                                     //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                            //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                              //          .endofpacket
		.rsp_src_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (8),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) system_console_avalon_jtag_slave_burst_adapter (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                                          //       cr0.clk
		.reset                 (system_console_reset_reset_bridge_in_reset_reset),                     // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                                    //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                     //          .data
		.sink0_channel         (cmd_mux_src_channel),                                                  //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                              //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                                    //          .ready
		.source0_valid         (system_console_avalon_jtag_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (system_console_avalon_jtag_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (system_console_avalon_jtag_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (system_console_avalon_jtag_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (system_console_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (system_console_avalon_jtag_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (8),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) alt_vip_vfr_0_avalon_slave_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                                              //       cr0.clk
		.reset                 (alt_vip_vfr_0_clock_reset_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                          //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                           //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                        //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                    //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                          //          .ready
		.source0_valid         (alt_vip_vfr_0_avalon_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (alt_vip_vfr_0_avalon_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (alt_vip_vfr_0_avalon_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (alt_vip_vfr_0_avalon_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (alt_vip_vfr_0_avalon_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (alt_vip_vfr_0_avalon_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (8),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) reg32_avalon_interface_0_avalon_slave_0_burst_adapter (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                                                 //       cr0.clk
		.reset                 (system_console_reset_reset_bridge_in_reset_reset),                            // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                                       //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                                        //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                                     //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                                                 //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                                       //          .ready
		.source0_valid         (reg32_avalon_interface_0_avalon_slave_0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (reg32_avalon_interface_0_avalon_slave_0_burst_adapter_source0_data),          //          .data
		.source0_channel       (reg32_avalon_interface_0_avalon_slave_0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (reg32_avalon_interface_0_avalon_slave_0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (reg32_avalon_interface_0_avalon_slave_0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (reg32_avalon_interface_0_avalon_slave_0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (8),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sysid_qsys_0_control_slave_burst_adapter (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                                    //       cr0.clk
		.reset                 (sysid_qsys_0_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                          //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                           //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                        //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                                    //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                          //          .ready
		.source0_valid         (sysid_qsys_0_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sysid_qsys_0_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sysid_qsys_0_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sysid_qsys_0_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sysid_qsys_0_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sysid_qsys_0_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (8),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fifo_hps_to_fpga_in_csr_burst_adapter (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                                 //       cr0.clk
		.reset                 (system_console_reset_reset_bridge_in_reset_reset),            // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                       //          .ready
		.source0_valid         (fifo_hps_to_fpga_in_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fifo_hps_to_fpga_in_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (fifo_hps_to_fpga_in_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fifo_hps_to_fpga_in_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fifo_hps_to_fpga_in_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fifo_hps_to_fpga_in_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (8),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fifo_fpga_to_hps_out_csr_burst_adapter (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                                  //       cr0.clk
		.reset                 (system_console_reset_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                                        //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                                         //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                                      //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                                  //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                                        //          .ready
		.source0_valid         (fifo_fpga_to_hps_out_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fifo_fpga_to_hps_out_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (fifo_fpga_to_hps_out_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fifo_fpga_to_hps_out_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fifo_fpga_to_hps_out_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fifo_fpga_to_hps_out_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (8),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) hex5_hex0_s1_burst_adapter (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                      //       cr0.clk
		.reset                 (system_console_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                             //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                            //          .ready
		.source0_valid         (hex5_hex0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (hex5_hex0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (hex5_hex0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (hex5_hex0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (hex5_hex0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (hex5_hex0_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (8),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pushbuttons_s1_burst_adapter (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                        //       cr0.clk
		.reset                 (system_console_reset_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                               //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                              //          .ready
		.source0_valid         (pushbuttons_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pushbuttons_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pushbuttons_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pushbuttons_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pushbuttons_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pushbuttons_s1_burst_adapter_source0_ready)          //          .ready
	);

	sys_vga_mm_interconnect_2_cmd_demux cmd_demux (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                              //        clk.clk
		.reset              (Arm_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                                     //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                     //           .valid
		.src0_data          (cmd_demux_src0_data),                                                      //           .data
		.src0_channel       (cmd_demux_src0_channel),                                                   //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                             //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                               //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                                     //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                                     //           .valid
		.src1_data          (cmd_demux_src1_data),                                                      //           .data
		.src1_channel       (cmd_demux_src1_channel),                                                   //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                             //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                               //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                                     //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                                     //           .valid
		.src2_data          (cmd_demux_src2_data),                                                      //           .data
		.src2_channel       (cmd_demux_src2_channel),                                                   //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                             //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                               //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                                     //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                                     //           .valid
		.src3_data          (cmd_demux_src3_data),                                                      //           .data
		.src3_channel       (cmd_demux_src3_channel),                                                   //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                             //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                                               //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                                     //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                                     //           .valid
		.src4_data          (cmd_demux_src4_data),                                                      //           .data
		.src4_channel       (cmd_demux_src4_channel),                                                   //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                                             //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                                               //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                                     //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                                     //           .valid
		.src5_data          (cmd_demux_src5_data),                                                      //           .data
		.src5_channel       (cmd_demux_src5_channel),                                                   //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                                             //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                                               //           .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                                                     //       src6.ready
		.src6_valid         (cmd_demux_src6_valid),                                                     //           .valid
		.src6_data          (cmd_demux_src6_data),                                                      //           .data
		.src6_channel       (cmd_demux_src6_channel),                                                   //           .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                                             //           .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                                               //           .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                                                     //       src7.ready
		.src7_valid         (cmd_demux_src7_valid),                                                     //           .valid
		.src7_data          (cmd_demux_src7_data),                                                      //           .data
		.src7_channel       (cmd_demux_src7_channel),                                                   //           .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),                                             //           .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket)                                                //           .endofpacket
	);

	sys_vga_mm_interconnect_2_cmd_demux cmd_demux_001 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                              //        clk.clk
		.reset              (Arm_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                                 //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                                 //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                                  //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                               //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                         //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                           //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                                 //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                                 //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                                  //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                               //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                                         //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                                           //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                                 //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                                 //           .valid
		.src2_data          (cmd_demux_001_src2_data),                                                  //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                                               //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                                         //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                                           //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                                                 //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                                                 //           .valid
		.src3_data          (cmd_demux_001_src3_data),                                                  //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                                               //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                                         //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                                           //           .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                                                 //       src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                                                 //           .valid
		.src4_data          (cmd_demux_001_src4_data),                                                  //           .data
		.src4_channel       (cmd_demux_001_src4_channel),                                               //           .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                                         //           .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket),                                           //           .endofpacket
		.src5_ready         (cmd_demux_001_src5_ready),                                                 //       src5.ready
		.src5_valid         (cmd_demux_001_src5_valid),                                                 //           .valid
		.src5_data          (cmd_demux_001_src5_data),                                                  //           .data
		.src5_channel       (cmd_demux_001_src5_channel),                                               //           .channel
		.src5_startofpacket (cmd_demux_001_src5_startofpacket),                                         //           .startofpacket
		.src5_endofpacket   (cmd_demux_001_src5_endofpacket),                                           //           .endofpacket
		.src6_ready         (cmd_demux_001_src6_ready),                                                 //       src6.ready
		.src6_valid         (cmd_demux_001_src6_valid),                                                 //           .valid
		.src6_data          (cmd_demux_001_src6_data),                                                  //           .data
		.src6_channel       (cmd_demux_001_src6_channel),                                               //           .channel
		.src6_startofpacket (cmd_demux_001_src6_startofpacket),                                         //           .startofpacket
		.src6_endofpacket   (cmd_demux_001_src6_endofpacket),                                           //           .endofpacket
		.src7_ready         (cmd_demux_001_src7_ready),                                                 //       src7.ready
		.src7_valid         (cmd_demux_001_src7_valid),                                                 //           .valid
		.src7_data          (cmd_demux_001_src7_data),                                                  //           .data
		.src7_channel       (cmd_demux_001_src7_channel),                                               //           .channel
		.src7_startofpacket (cmd_demux_001_src7_startofpacket),                                         //           .startofpacket
		.src7_endofpacket   (cmd_demux_001_src7_endofpacket)                                            //           .endofpacket
	);

	sys_vga_mm_interconnect_2_cmd_mux cmd_mux (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                      //       clk.clk
		.reset               (system_console_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_src_valid),                                //          .valid
		.src_data            (cmd_mux_src_data),                                 //          .data
		.src_channel         (cmd_mux_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                           //          .channel
		.sink0_data          (cmd_demux_src0_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                    //          .endofpacket
	);

	sys_vga_mm_interconnect_2_cmd_mux cmd_mux_001 (
		.clk                 (pll_0_outclk0_clk),                                           //       clk.clk
		.reset               (alt_vip_vfr_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                       //          .valid
		.src_data            (cmd_mux_001_src_data),                                        //          .data
		.src_channel         (cmd_mux_001_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                           //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                           //          .valid
		.sink0_channel       (crosser_out_channel),                                         //          .channel
		.sink0_data          (crosser_out_data),                                            //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                                     //          .endofpacket
		.sink1_ready         (crosser_001_out_ready),                                       //     sink1.ready
		.sink1_valid         (crosser_001_out_valid),                                       //          .valid
		.sink1_channel       (crosser_001_out_channel),                                     //          .channel
		.sink1_data          (crosser_001_out_data),                                        //          .data
		.sink1_startofpacket (crosser_001_out_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (crosser_001_out_endofpacket)                                  //          .endofpacket
	);

	sys_vga_mm_interconnect_2_cmd_mux cmd_mux_002 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                      //       clk.clk
		.reset               (system_console_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                            //          .valid
		.src_data            (cmd_mux_002_src_data),                             //          .data
		.src_channel         (cmd_mux_002_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                           //          .channel
		.sink0_data          (cmd_demux_src2_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                    //          .endofpacket
	);

	sys_vga_mm_interconnect_2_cmd_mux cmd_mux_003 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                    //       clk.clk
		.reset               (sysid_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                          //          .valid
		.src_data            (cmd_mux_003_src_data),                           //          .data
		.src_channel         (cmd_mux_003_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                         //          .channel
		.sink0_data          (cmd_demux_src3_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)                  //          .endofpacket
	);

	sys_vga_mm_interconnect_2_cmd_mux cmd_mux_004 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                      //       clk.clk
		.reset               (system_console_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                            //          .valid
		.src_data            (cmd_mux_004_src_data),                             //          .data
		.src_channel         (cmd_mux_004_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                           //          .channel
		.sink0_data          (cmd_demux_src4_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)                    //          .endofpacket
	);

	sys_vga_mm_interconnect_2_cmd_mux cmd_mux_005 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                      //       clk.clk
		.reset               (system_console_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                            //          .valid
		.src_data            (cmd_mux_005_src_data),                             //          .data
		.src_channel         (cmd_mux_005_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                           //          .channel
		.sink0_data          (cmd_demux_src5_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src5_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket)                    //          .endofpacket
	);

	sys_vga_mm_interconnect_2_cmd_mux cmd_mux_006 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                      //       clk.clk
		.reset               (system_console_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                            //          .valid
		.src_data            (cmd_mux_006_src_data),                             //          .data
		.src_channel         (cmd_mux_006_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                           //          .channel
		.sink0_data          (cmd_demux_src6_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src6_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket)                    //          .endofpacket
	);

	sys_vga_mm_interconnect_2_cmd_mux cmd_mux_007 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                      //       clk.clk
		.reset               (system_console_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                            //          .valid
		.src_data            (cmd_mux_007_src_data),                             //          .data
		.src_channel         (cmd_mux_007_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                           //          .channel
		.sink0_data          (cmd_demux_src7_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src7_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src7_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src7_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src7_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src7_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src7_endofpacket)                    //          .endofpacket
	);

	sys_vga_mm_interconnect_2_rsp_demux rsp_demux (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                      //       clk.clk
		.reset              (system_console_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                             //      sink.ready
		.sink_channel       (router_002_src_channel),                           //          .channel
		.sink_data          (router_002_src_data),                              //          .data
		.sink_startofpacket (router_002_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_002_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_src0_data),                              //          .data
		.src0_channel       (rsp_demux_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_src1_data),                              //          .data
		.src1_channel       (rsp_demux_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                        //          .endofpacket
	);

	sys_vga_mm_interconnect_2_rsp_demux_001 rsp_demux_001 (
		.clk                (pll_0_outclk0_clk),                                           //       clk.clk
		.reset              (alt_vip_vfr_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                        //      sink.ready
		.sink_channel       (router_003_src_channel),                                      //          .channel
		.sink_data          (router_003_src_data),                                         //          .data
		.sink_startofpacket (router_003_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_003_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                                    //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                                    //          .valid
		.src1_data          (rsp_demux_001_src1_data),                                     //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                                  //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                               //          .endofpacket
	);

	sys_vga_mm_interconnect_2_rsp_demux rsp_demux_002 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                      //       clk.clk
		.reset              (system_console_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                             //      sink.ready
		.sink_channel       (router_004_src_channel),                           //          .channel
		.sink_data          (router_004_src_data),                              //          .data
		.sink_startofpacket (router_004_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_004_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_002_src0_data),                          //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_002_src1_data),                          //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                    //          .endofpacket
	);

	sys_vga_mm_interconnect_2_rsp_demux rsp_demux_003 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                    //       clk.clk
		.reset              (sysid_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                           //      sink.ready
		.sink_channel       (router_005_src_channel),                         //          .channel
		.sink_data          (router_005_src_data),                            //          .data
		.sink_startofpacket (router_005_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_005_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_003_src0_data),                        //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_003_src1_data),                        //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                  //          .endofpacket
	);

	sys_vga_mm_interconnect_2_rsp_demux rsp_demux_004 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                      //       clk.clk
		.reset              (system_console_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                             //      sink.ready
		.sink_channel       (router_006_src_channel),                           //          .channel
		.sink_data          (router_006_src_data),                              //          .data
		.sink_startofpacket (router_006_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_006_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_004_src0_data),                          //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_004_src1_data),                          //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                    //          .endofpacket
	);

	sys_vga_mm_interconnect_2_rsp_demux rsp_demux_005 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                      //       clk.clk
		.reset              (system_console_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                             //      sink.ready
		.sink_channel       (router_007_src_channel),                           //          .channel
		.sink_data          (router_007_src_data),                              //          .data
		.sink_startofpacket (router_007_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_007_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_005_src0_data),                          //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_005_src1_data),                          //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)                    //          .endofpacket
	);

	sys_vga_mm_interconnect_2_rsp_demux rsp_demux_006 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                      //       clk.clk
		.reset              (system_console_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                             //      sink.ready
		.sink_channel       (router_008_src_channel),                           //          .channel
		.sink_data          (router_008_src_data),                              //          .data
		.sink_startofpacket (router_008_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_008_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_006_src0_data),                          //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_006_src1_data),                          //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                    //          .endofpacket
	);

	sys_vga_mm_interconnect_2_rsp_demux rsp_demux_007 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                      //       clk.clk
		.reset              (system_console_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                             //      sink.ready
		.sink_channel       (router_009_src_channel),                           //          .channel
		.sink_data          (router_009_src_data),                              //          .data
		.sink_startofpacket (router_009_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_009_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_007_src0_data),                          //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_007_src1_data),                          //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                    //          .endofpacket
	);

	sys_vga_mm_interconnect_2_rsp_mux rsp_mux (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                                              //       clk.clk
		.reset               (Arm_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                        //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                        //          .valid
		.src_data            (rsp_mux_src_data),                                                         //          .data
		.src_channel         (rsp_mux_src_channel),                                                      //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                  //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                     //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                     //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                                   //          .channel
		.sink0_data          (rsp_demux_src0_data),                                                      //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                               //          .endofpacket
		.sink1_ready         (crosser_002_out_ready),                                                    //     sink1.ready
		.sink1_valid         (crosser_002_out_valid),                                                    //          .valid
		.sink1_channel       (crosser_002_out_channel),                                                  //          .channel
		.sink1_data          (crosser_002_out_data),                                                     //          .data
		.sink1_startofpacket (crosser_002_out_startofpacket),                                            //          .startofpacket
		.sink1_endofpacket   (crosser_002_out_endofpacket),                                              //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                                 //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                                 //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                               //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                                  //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                         //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                                           //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                                 //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                                 //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                                               //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                                  //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                                         //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                                           //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                                                 //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                                                 //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                                               //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                                  //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                                         //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                                           //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                                                 //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                                                 //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                                               //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                                                  //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),                                         //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),                                           //          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),                                                 //     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),                                                 //          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),                                               //          .channel
		.sink6_data          (rsp_demux_006_src0_data),                                                  //          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),                                         //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket),                                           //          .endofpacket
		.sink7_ready         (rsp_demux_007_src0_ready),                                                 //     sink7.ready
		.sink7_valid         (rsp_demux_007_src0_valid),                                                 //          .valid
		.sink7_channel       (rsp_demux_007_src0_channel),                                               //          .channel
		.sink7_data          (rsp_demux_007_src0_data),                                                  //          .data
		.sink7_startofpacket (rsp_demux_007_src0_startofpacket),                                         //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src0_endofpacket)                                            //          .endofpacket
	);

	sys_vga_mm_interconnect_2_rsp_mux rsp_mux_001 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                                              //       clk.clk
		.reset               (Arm_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                    //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                    //          .valid
		.src_data            (rsp_mux_001_src_data),                                                     //          .data
		.src_channel         (rsp_mux_001_src_channel),                                                  //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                                     //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                                     //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                                   //          .channel
		.sink0_data          (rsp_demux_src1_data),                                                      //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                                               //          .endofpacket
		.sink1_ready         (crosser_003_out_ready),                                                    //     sink1.ready
		.sink1_valid         (crosser_003_out_valid),                                                    //          .valid
		.sink1_channel       (crosser_003_out_channel),                                                  //          .channel
		.sink1_data          (crosser_003_out_data),                                                     //          .data
		.sink1_startofpacket (crosser_003_out_startofpacket),                                            //          .startofpacket
		.sink1_endofpacket   (crosser_003_out_endofpacket),                                              //          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                                                 //     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                                                 //          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                                               //          .channel
		.sink2_data          (rsp_demux_002_src1_data),                                                  //          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),                                         //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket),                                           //          .endofpacket
		.sink3_ready         (rsp_demux_003_src1_ready),                                                 //     sink3.ready
		.sink3_valid         (rsp_demux_003_src1_valid),                                                 //          .valid
		.sink3_channel       (rsp_demux_003_src1_channel),                                               //          .channel
		.sink3_data          (rsp_demux_003_src1_data),                                                  //          .data
		.sink3_startofpacket (rsp_demux_003_src1_startofpacket),                                         //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src1_endofpacket),                                           //          .endofpacket
		.sink4_ready         (rsp_demux_004_src1_ready),                                                 //     sink4.ready
		.sink4_valid         (rsp_demux_004_src1_valid),                                                 //          .valid
		.sink4_channel       (rsp_demux_004_src1_channel),                                               //          .channel
		.sink4_data          (rsp_demux_004_src1_data),                                                  //          .data
		.sink4_startofpacket (rsp_demux_004_src1_startofpacket),                                         //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src1_endofpacket),                                           //          .endofpacket
		.sink5_ready         (rsp_demux_005_src1_ready),                                                 //     sink5.ready
		.sink5_valid         (rsp_demux_005_src1_valid),                                                 //          .valid
		.sink5_channel       (rsp_demux_005_src1_channel),                                               //          .channel
		.sink5_data          (rsp_demux_005_src1_data),                                                  //          .data
		.sink5_startofpacket (rsp_demux_005_src1_startofpacket),                                         //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src1_endofpacket),                                           //          .endofpacket
		.sink6_ready         (rsp_demux_006_src1_ready),                                                 //     sink6.ready
		.sink6_valid         (rsp_demux_006_src1_valid),                                                 //          .valid
		.sink6_channel       (rsp_demux_006_src1_channel),                                               //          .channel
		.sink6_data          (rsp_demux_006_src1_data),                                                  //          .data
		.sink6_startofpacket (rsp_demux_006_src1_startofpacket),                                         //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src1_endofpacket),                                           //          .endofpacket
		.sink7_ready         (rsp_demux_007_src1_ready),                                                 //     sink7.ready
		.sink7_valid         (rsp_demux_007_src1_valid),                                                 //          .valid
		.sink7_channel       (rsp_demux_007_src1_channel),                                               //          .channel
		.sink7_data          (rsp_demux_007_src1_data),                                                  //          .data
		.sink7_startofpacket (rsp_demux_007_src1_startofpacket),                                         //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src1_endofpacket)                                            //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (116),
		.BITS_PER_SYMBOL     (116),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (sys_sdram_pll_0_sys_clk_clk),                                              //        in_clk.clk
		.in_reset          (Arm_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                                        //       out_clk.clk
		.out_reset         (alt_vip_vfr_0_clock_reset_reset_reset_bridge_in_reset_reset),              // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                                     //            in.ready
		.in_valid          (cmd_demux_src1_valid),                                                     //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                                             //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                                               //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                                                   //              .channel
		.in_data           (cmd_demux_src1_data),                                                      //              .data
		.out_ready         (crosser_out_ready),                                                        //           out.ready
		.out_valid         (crosser_out_valid),                                                        //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                                //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                                  //              .endofpacket
		.out_channel       (crosser_out_channel),                                                      //              .channel
		.out_data          (crosser_out_data),                                                         //              .data
		.in_empty          (1'b0),                                                                     //   (terminated)
		.in_error          (1'b0),                                                                     //   (terminated)
		.out_empty         (),                                                                         //   (terminated)
		.out_error         ()                                                                          //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (116),
		.BITS_PER_SYMBOL     (116),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (sys_sdram_pll_0_sys_clk_clk),                                              //        in_clk.clk
		.in_reset          (Arm_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                                        //       out_clk.clk
		.out_reset         (alt_vip_vfr_0_clock_reset_reset_reset_bridge_in_reset_reset),              // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                                                 //            in.ready
		.in_valid          (cmd_demux_001_src1_valid),                                                 //              .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),                                         //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),                                           //              .endofpacket
		.in_channel        (cmd_demux_001_src1_channel),                                               //              .channel
		.in_data           (cmd_demux_001_src1_data),                                                  //              .data
		.out_ready         (crosser_001_out_ready),                                                    //           out.ready
		.out_valid         (crosser_001_out_valid),                                                    //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                            //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                              //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                                  //              .channel
		.out_data          (crosser_001_out_data),                                                     //              .data
		.in_empty          (1'b0),                                                                     //   (terminated)
		.in_error          (1'b0),                                                                     //   (terminated)
		.out_empty         (),                                                                         //   (terminated)
		.out_error         ()                                                                          //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (116),
		.BITS_PER_SYMBOL     (116),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (pll_0_outclk0_clk),                                                        //        in_clk.clk
		.in_reset          (alt_vip_vfr_0_clock_reset_reset_reset_bridge_in_reset_reset),              //  in_clk_reset.reset
		.out_clk           (sys_sdram_pll_0_sys_clk_clk),                                              //       out_clk.clk
		.out_reset         (Arm_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                                 //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                                                 //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                                         //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                                           //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                                               //              .channel
		.in_data           (rsp_demux_001_src0_data),                                                  //              .data
		.out_ready         (crosser_002_out_ready),                                                    //           out.ready
		.out_valid         (crosser_002_out_valid),                                                    //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                            //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                              //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                                  //              .channel
		.out_data          (crosser_002_out_data),                                                     //              .data
		.in_empty          (1'b0),                                                                     //   (terminated)
		.in_error          (1'b0),                                                                     //   (terminated)
		.out_empty         (),                                                                         //   (terminated)
		.out_error         ()                                                                          //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (116),
		.BITS_PER_SYMBOL     (116),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (pll_0_outclk0_clk),                                                        //        in_clk.clk
		.in_reset          (alt_vip_vfr_0_clock_reset_reset_reset_bridge_in_reset_reset),              //  in_clk_reset.reset
		.out_clk           (sys_sdram_pll_0_sys_clk_clk),                                              //       out_clk.clk
		.out_reset         (Arm_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src1_ready),                                                 //            in.ready
		.in_valid          (rsp_demux_001_src1_valid),                                                 //              .valid
		.in_startofpacket  (rsp_demux_001_src1_startofpacket),                                         //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src1_endofpacket),                                           //              .endofpacket
		.in_channel        (rsp_demux_001_src1_channel),                                               //              .channel
		.in_data           (rsp_demux_001_src1_data),                                                  //              .data
		.out_ready         (crosser_003_out_ready),                                                    //           out.ready
		.out_valid         (crosser_003_out_valid),                                                    //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                            //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                              //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                                  //              .channel
		.out_data          (crosser_003_out_data),                                                     //              .data
		.in_empty          (1'b0),                                                                     //   (terminated)
		.in_error          (1'b0),                                                                     //   (terminated)
		.out_empty         (),                                                                         //   (terminated)
		.out_error         ()                                                                          //   (terminated)
	);

	sys_vga_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (sys_sdram_pll_0_sys_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (system_console_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (system_console_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (system_console_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (system_console_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                //         .error
	);

	sys_vga_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (alt_vip_vfr_0_clock_reset_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                            //         .error
	);

	sys_vga_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (sys_sdram_pll_0_sys_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (system_console_reset_reset_bridge_in_reset_reset),                   // in_rst_0.reset
		.in_0_data      (reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (reg32_avalon_interface_0_avalon_slave_0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                                  //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                                  //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                                   //         .error
	);

	sys_vga_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (sys_sdram_pll_0_sys_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (sysid_qsys_0_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (sysid_qsys_0_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sysid_qsys_0_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sysid_qsys_0_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                      //         .error
	);

	sys_vga_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (sys_sdram_pll_0_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (system_console_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (fifo_hps_to_fpga_in_csr_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (fifo_hps_to_fpga_in_csr_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (fifo_hps_to_fpga_in_csr_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                   //         .error
	);

	sys_vga_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (sys_sdram_pll_0_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (system_console_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (fifo_fpga_to_hps_out_csr_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (fifo_fpga_to_hps_out_csr_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (fifo_fpga_to_hps_out_csr_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                    //         .error
	);

	sys_vga_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (sys_sdram_pll_0_sys_clk_clk),                      // in_clk_0.clk
		.in_rst_0_reset (system_console_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex5_hex0_s1_agent_rdata_fifo_out_data),           //     in_0.data
		.in_0_valid     (hex5_hex0_s1_agent_rdata_fifo_out_valid),          //         .valid
		.in_0_ready     (hex5_hex0_s1_agent_rdata_fifo_out_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                 //         .error
	);

	sys_vga_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (sys_sdram_pll_0_sys_clk_clk),                      // in_clk_0.clk
		.in_rst_0_reset (system_console_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pushbuttons_s1_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (pushbuttons_s1_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (pushbuttons_s1_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                 //         .error
	);

endmodule
